<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_s_p_i___init_type_def" xml:lang="en-US">
<title>SPI_InitTypeDef Struct Reference</title>
<indexterm><primary>SPI_InitTypeDef</primary></indexterm>
<para>

<para>SPI Configuration Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
 
</para>
<para>
<computeroutput>#include &lt;stm32f4xx_hal_spi.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Data Fields    </title>
        <itemizedlist>
            <listitem><para>uint32_t <link linkend="_struct_s_p_i___init_type_def_1a0ffc93ec511ed9cf1663f6939bd3e839">Mode</link></para>
</listitem>
            <listitem><para>uint32_t <link linkend="_struct_s_p_i___init_type_def_1ab94410c1333b512e271b1c135fe50916">Direction</link></para>
</listitem>
            <listitem><para>uint32_t <link linkend="_struct_s_p_i___init_type_def_1a98999b0cd6e4c94f05b61b2554ee0371">DataSize</link></para>
</listitem>
            <listitem><para>uint32_t <link linkend="_struct_s_p_i___init_type_def_1a83f278c9d173d3cd021644692bf3c435">CLKPolarity</link></para>
</listitem>
            <listitem><para>uint32_t <link linkend="_struct_s_p_i___init_type_def_1aba7183911cbc41063270dab182de768f">CLKPhase</link></para>
</listitem>
            <listitem><para>uint32_t <link linkend="_struct_s_p_i___init_type_def_1ae4a064e48fd5945eda7210d515fed69c">NSS</link></para>
</listitem>
            <listitem><para>uint32_t <link linkend="_struct_s_p_i___init_type_def_1a2fa72ad4f27606fffa2ec9456bcb0a56">BaudRatePrescaler</link></para>
</listitem>
            <listitem><para>uint32_t <link linkend="_struct_s_p_i___init_type_def_1a9740c535f073c87bb06668385ce96002">FirstBit</link></para>
</listitem>
            <listitem><para>uint32_t <link linkend="_struct_s_p_i___init_type_def_1a3db685adbdc6f7bfc7ad0191ba5ab277">TIMode</link></para>
</listitem>
            <listitem><para>uint32_t <link linkend="_struct_s_p_i___init_type_def_1a9d334a47c34b01cbfa55ff66cfc1e0ce">CRCCalculation</link></para>
</listitem>
            <listitem><para>uint32_t <link linkend="_struct_s_p_i___init_type_def_1a48aef59cfd7bf0262b1ad993fef2fc7b">CRCPolynomial</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>SPI Configuration Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__spi_8h_source_1l00062">62</link> of file <link linkend="_stm32f4xx__hal__spi_8h_source">stm32f4xx_hal_spi.h</link>.</para>
</section>
<section>
<title>Field Documentation</title>
<anchor xml:id="_struct_s_p_i___init_type_def_1a2fa72ad4f27606fffa2ec9456bcb0a56"/><section>
    <title>BaudRatePrescaler</title>
<indexterm><primary>BaudRatePrescaler</primary><secondary>SPI_InitTypeDef</secondary></indexterm>
<indexterm><primary>SPI_InitTypeDef</primary><secondary>BaudRatePrescaler</secondary></indexterm>
<para><computeroutput>uint32_t BaudRatePrescaler</computeroutput></para>
<para>Specifies the Baud Rate prescaler value which will be used to configure the transmit and receive SCK clock. This parameter can be a value of <link linkend="_group___s_p_i___baud_rate___prescaler">SPI_BaudRate_Prescaler</link> <note><title>Note</title>

<para>The communication clock is derived from the master clock. The slave clock does not need to be set </para>
</note>
</para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__spi_8h_source_1l00083">83</link> of file <link linkend="_stm32f4xx__hal__spi_8h_source">stm32f4xx_hal_spi.h</link>.</para>
</section>
<anchor xml:id="_struct_s_p_i___init_type_def_1aba7183911cbc41063270dab182de768f"/><section>
    <title>CLKPhase</title>
<indexterm><primary>CLKPhase</primary><secondary>SPI_InitTypeDef</secondary></indexterm>
<indexterm><primary>SPI_InitTypeDef</primary><secondary>CLKPhase</secondary></indexterm>
<para><computeroutput>uint32_t CLKPhase</computeroutput></para>
<para>Specifies the clock active edge for the bit capture. This parameter can be a value of <link linkend="_group___s_p_i___clock___phase">SPI_Clock_Phase</link> </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__spi_8h_source_1l00076">76</link> of file <link linkend="_stm32f4xx__hal__spi_8h_source">stm32f4xx_hal_spi.h</link>.</para>
</section>
<anchor xml:id="_struct_s_p_i___init_type_def_1a83f278c9d173d3cd021644692bf3c435"/><section>
    <title>CLKPolarity</title>
<indexterm><primary>CLKPolarity</primary><secondary>SPI_InitTypeDef</secondary></indexterm>
<indexterm><primary>SPI_InitTypeDef</primary><secondary>CLKPolarity</secondary></indexterm>
<para><computeroutput>uint32_t CLKPolarity</computeroutput></para>
<para>Specifies the serial clock steady state. This parameter can be a value of <link linkend="_group___s_p_i___clock___polarity">SPI_Clock_Polarity</link> </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__spi_8h_source_1l00073">73</link> of file <link linkend="_stm32f4xx__hal__spi_8h_source">stm32f4xx_hal_spi.h</link>.</para>
</section>
<anchor xml:id="_struct_s_p_i___init_type_def_1a9d334a47c34b01cbfa55ff66cfc1e0ce"/><section>
    <title>CRCCalculation</title>
<indexterm><primary>CRCCalculation</primary><secondary>SPI_InitTypeDef</secondary></indexterm>
<indexterm><primary>SPI_InitTypeDef</primary><secondary>CRCCalculation</secondary></indexterm>
<para><computeroutput>uint32_t CRCCalculation</computeroutput></para>
<para>Specifies if the CRC calculation is enabled or not. This parameter can be a value of <link linkend="_group___s_p_i___c_r_c___calculation">SPI_CRC_Calculation</link> </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__spi_8h_source_1l00095">95</link> of file <link linkend="_stm32f4xx__hal__spi_8h_source">stm32f4xx_hal_spi.h</link>.</para>
</section>
<anchor xml:id="_struct_s_p_i___init_type_def_1a48aef59cfd7bf0262b1ad993fef2fc7b"/><section>
    <title>CRCPolynomial</title>
<indexterm><primary>CRCPolynomial</primary><secondary>SPI_InitTypeDef</secondary></indexterm>
<indexterm><primary>SPI_InitTypeDef</primary><secondary>CRCPolynomial</secondary></indexterm>
<para><computeroutput>uint32_t CRCPolynomial</computeroutput></para>
<para>Specifies the polynomial used for the CRC calculation. This parameter must be a number between Min_Data = 0 and Max_Data = 65535 </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__spi_8h_source_1l00098">98</link> of file <link linkend="_stm32f4xx__hal__spi_8h_source">stm32f4xx_hal_spi.h</link>.</para>
</section>
<anchor xml:id="_struct_s_p_i___init_type_def_1a98999b0cd6e4c94f05b61b2554ee0371"/><section>
    <title>DataSize</title>
<indexterm><primary>DataSize</primary><secondary>SPI_InitTypeDef</secondary></indexterm>
<indexterm><primary>SPI_InitTypeDef</primary><secondary>DataSize</secondary></indexterm>
<para><computeroutput>uint32_t DataSize</computeroutput></para>
<para>Specifies the SPI data size. This parameter can be a value of <link linkend="_group___s_p_i__data__size">SPI_data_size</link> </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__spi_8h_source_1l00070">70</link> of file <link linkend="_stm32f4xx__hal__spi_8h_source">stm32f4xx_hal_spi.h</link>.</para>
</section>
<anchor xml:id="_struct_s_p_i___init_type_def_1ab94410c1333b512e271b1c135fe50916"/><section>
    <title>Direction</title>
<indexterm><primary>Direction</primary><secondary>SPI_InitTypeDef</secondary></indexterm>
<indexterm><primary>SPI_InitTypeDef</primary><secondary>Direction</secondary></indexterm>
<para><computeroutput>uint32_t Direction</computeroutput></para>
<para>Specifies the SPI Directional mode state. This parameter can be a value of <link linkend="_group___s_p_i___direction__mode">SPI_Direction_mode</link> </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__spi_8h_source_1l00067">67</link> of file <link linkend="_stm32f4xx__hal__spi_8h_source">stm32f4xx_hal_spi.h</link>.</para>
</section>
<anchor xml:id="_struct_s_p_i___init_type_def_1a9740c535f073c87bb06668385ce96002"/><section>
    <title>FirstBit</title>
<indexterm><primary>FirstBit</primary><secondary>SPI_InitTypeDef</secondary></indexterm>
<indexterm><primary>SPI_InitTypeDef</primary><secondary>FirstBit</secondary></indexterm>
<para><computeroutput>uint32_t FirstBit</computeroutput></para>
<para>Specifies whether data transfers start from MSB or LSB bit. This parameter can be a value of <link linkend="_group___s_p_i___m_s_b___l_s_b__transmission">SPI_MSB_LSB_transmission</link> </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__spi_8h_source_1l00089">89</link> of file <link linkend="_stm32f4xx__hal__spi_8h_source">stm32f4xx_hal_spi.h</link>.</para>
</section>
<anchor xml:id="_struct_s_p_i___init_type_def_1a0ffc93ec511ed9cf1663f6939bd3e839"/><section>
    <title>Mode</title>
<indexterm><primary>Mode</primary><secondary>SPI_InitTypeDef</secondary></indexterm>
<indexterm><primary>SPI_InitTypeDef</primary><secondary>Mode</secondary></indexterm>
<para><computeroutput>uint32_t Mode</computeroutput></para>
<para>Specifies the SPI operating mode. This parameter can be a value of <link linkend="_group___s_p_i__mode">SPI_mode</link> </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__spi_8h_source_1l00064">64</link> of file <link linkend="_stm32f4xx__hal__spi_8h_source">stm32f4xx_hal_spi.h</link>.</para>
</section>
<anchor xml:id="_struct_s_p_i___init_type_def_1ae4a064e48fd5945eda7210d515fed69c"/><section>
    <title>NSS</title>
<indexterm><primary>NSS</primary><secondary>SPI_InitTypeDef</secondary></indexterm>
<indexterm><primary>SPI_InitTypeDef</primary><secondary>NSS</secondary></indexterm>
<para><computeroutput>uint32_t NSS</computeroutput></para>
<para>Specifies whether the NSS signal is managed by hardware (NSS pin) or by software using the SSI bit. This parameter can be a value of <link linkend="_group___s_p_i___slave___select__management">SPI_Slave_Select_management</link> </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__spi_8h_source_1l00079">79</link> of file <link linkend="_stm32f4xx__hal__spi_8h_source">stm32f4xx_hal_spi.h</link>.</para>
</section>
<anchor xml:id="_struct_s_p_i___init_type_def_1a3db685adbdc6f7bfc7ad0191ba5ab277"/><section>
    <title>TIMode</title>
<indexterm><primary>TIMode</primary><secondary>SPI_InitTypeDef</secondary></indexterm>
<indexterm><primary>SPI_InitTypeDef</primary><secondary>TIMode</secondary></indexterm>
<para><computeroutput>uint32_t TIMode</computeroutput></para>
<para>Specifies if the TI mode is enabled or not. This parameter can be a value of <link linkend="_group___s_p_i___t_i__mode">SPI_TI_mode</link> </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__spi_8h_source_1l00092">92</link> of file <link linkend="_stm32f4xx__hal__spi_8h_source">stm32f4xx_hal_spi.h</link>.</para>
</section>
<para>
The documentation for this struct was generated from the following file:</para>
C:/Users/dayton.flores/OneDrive/Documents/School/CU/ECEN 5803/Project 1/Module 1/Code2/sqrt_approx/mbed/TARGET_NUCLEO_F401RE/<link linkend="_stm32f4xx__hal__spi_8h">stm32f4xx_hal_spi.h</link></section>
</section>
