<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_core__cm_func_8h_source" xml:lang="en-US">
<title>core_cmFunc.h</title>
<indexterm><primary>C:/Users/dayton.flores/OneDrive/Documents/School/CU/ECEN 5803/Project 1/Module 1/Code2/sqrt_approx/mbed/TARGET_NUCLEO_F401RE/core_cmFunc.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_core__cm_func_8h_source_1l00001"/>00001 <emphasis role="comment">/**************************************************************************/</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00010"/>00010 <emphasis role="comment">/*&#32;Copyright&#32;(c)&#32;2009&#32;-&#32;2013&#32;ARM&#32;LIMITED</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00011"/>00011 <emphasis role="comment"></emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00012"/>00012 <emphasis role="comment">&#32;&#32;&#32;All&#32;rights&#32;reserved.</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00013"/>00013 <emphasis role="comment">&#32;&#32;&#32;Redistribution&#32;and&#32;use&#32;in&#32;source&#32;and&#32;binary&#32;forms,&#32;with&#32;or&#32;without</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00014"/>00014 <emphasis role="comment">&#32;&#32;&#32;modification,&#32;are&#32;permitted&#32;provided&#32;that&#32;the&#32;following&#32;conditions&#32;are&#32;met:</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00015"/>00015 <emphasis role="comment">&#32;&#32;&#32;-&#32;Redistributions&#32;of&#32;source&#32;code&#32;must&#32;retain&#32;the&#32;above&#32;copyright</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00016"/>00016 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;notice,&#32;this&#32;list&#32;of&#32;conditions&#32;and&#32;the&#32;following&#32;disclaimer.</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00017"/>00017 <emphasis role="comment">&#32;&#32;&#32;-&#32;Redistributions&#32;in&#32;binary&#32;form&#32;must&#32;reproduce&#32;the&#32;above&#32;copyright</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00018"/>00018 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;notice,&#32;this&#32;list&#32;of&#32;conditions&#32;and&#32;the&#32;following&#32;disclaimer&#32;in&#32;the</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00019"/>00019 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;documentation&#32;and/or&#32;other&#32;materials&#32;provided&#32;with&#32;the&#32;distribution.</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00020"/>00020 <emphasis role="comment">&#32;&#32;&#32;-&#32;Neither&#32;the&#32;name&#32;of&#32;ARM&#32;nor&#32;the&#32;names&#32;of&#32;its&#32;contributors&#32;may&#32;be&#32;used</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00021"/>00021 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;to&#32;endorse&#32;or&#32;promote&#32;products&#32;derived&#32;from&#32;this&#32;software&#32;without</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00022"/>00022 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;specific&#32;prior&#32;written&#32;permission.</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00023"/>00023 <emphasis role="comment">&#32;&#32;&#32;*</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00024"/>00024 <emphasis role="comment">&#32;&#32;&#32;THIS&#32;SOFTWARE&#32;IS&#32;PROVIDED&#32;BY&#32;THE&#32;COPYRIGHT&#32;HOLDERS&#32;AND&#32;CONTRIBUTORS&#32;&quot;AS&#32;IS&quot;</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00025"/>00025 <emphasis role="comment">&#32;&#32;&#32;AND&#32;ANY&#32;EXPRESS&#32;OR&#32;IMPLIED&#32;WARRANTIES,&#32;INCLUDING,&#32;BUT&#32;NOT&#32;LIMITED&#32;TO,&#32;THE</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00026"/>00026 <emphasis role="comment">&#32;&#32;&#32;IMPLIED&#32;WARRANTIES&#32;OF&#32;MERCHANTABILITY&#32;AND&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00027"/>00027 <emphasis role="comment">&#32;&#32;&#32;ARE&#32;DISCLAIMED.&#32;IN&#32;NO&#32;EVENT&#32;SHALL&#32;COPYRIGHT&#32;HOLDERS&#32;AND&#32;CONTRIBUTORS&#32;BE</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00028"/>00028 <emphasis role="comment">&#32;&#32;&#32;LIABLE&#32;FOR&#32;ANY&#32;DIRECT,&#32;INDIRECT,&#32;INCIDENTAL,&#32;SPECIAL,&#32;EXEMPLARY,&#32;OR</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00029"/>00029 <emphasis role="comment">&#32;&#32;&#32;CONSEQUENTIAL&#32;DAMAGES&#32;(INCLUDING,&#32;BUT&#32;NOT&#32;LIMITED&#32;TO,&#32;PROCUREMENT&#32;OF</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00030"/>00030 <emphasis role="comment">&#32;&#32;&#32;SUBSTITUTE&#32;GOODS&#32;OR&#32;SERVICES;&#32;LOSS&#32;OF&#32;USE,&#32;DATA,&#32;OR&#32;PROFITS;&#32;OR&#32;BUSINESS</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00031"/>00031 <emphasis role="comment">&#32;&#32;&#32;INTERRUPTION)&#32;HOWEVER&#32;CAUSED&#32;AND&#32;ON&#32;ANY&#32;THEORY&#32;OF&#32;LIABILITY,&#32;WHETHER&#32;IN</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00032"/>00032 <emphasis role="comment">&#32;&#32;&#32;CONTRACT,&#32;STRICT&#32;LIABILITY,&#32;OR&#32;TORT&#32;(INCLUDING&#32;NEGLIGENCE&#32;OR&#32;OTHERWISE)</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00033"/>00033 <emphasis role="comment">&#32;&#32;&#32;ARISING&#32;IN&#32;ANY&#32;WAY&#32;OUT&#32;OF&#32;THE&#32;USE&#32;OF&#32;THIS&#32;SOFTWARE,&#32;EVEN&#32;IF&#32;ADVISED&#32;OF&#32;THE</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00034"/>00034 <emphasis role="comment">&#32;&#32;&#32;POSSIBILITY&#32;OF&#32;SUCH&#32;DAMAGE.</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00035"/>00035 <emphasis role="comment">&#32;&#32;&#32;---------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00036"/>00036 
<anchor xml:id="_core__cm_func_8h_source_1l00037"/>00037 
<anchor xml:id="_core__cm_func_8h_source_1l00038"/>00038 <emphasis role="preprocessor">#ifndef&#32;__CORE_CMFUNC_H</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00039"/>00039 <emphasis role="preprocessor">#define&#32;__CORE_CMFUNC_H</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00040"/>00040 
<anchor xml:id="_core__cm_func_8h_source_1l00041"/>00041 
<anchor xml:id="_core__cm_func_8h_source_1l00042"/>00042 <emphasis role="comment">/*&#32;###########################&#32;&#32;Core&#32;Function&#32;Access&#32;&#32;###########################&#32;*/</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00048"/>00048 <emphasis role="preprocessor">#if&#32;&#32;&#32;defined&#32;(&#32;__CC_ARM&#32;)&#32;</emphasis><emphasis role="comment">/*------------------RealView&#32;Compiler&#32;-----------------*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00049"/>00049 <emphasis role="comment">/*&#32;ARM&#32;armcc&#32;specific&#32;functions&#32;*/</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00050"/>00050 
<anchor xml:id="_core__cm_func_8h_source_1l00051"/>00051 <emphasis role="preprocessor">#if&#32;(__ARMCC_VERSION&#32;&lt;&#32;400677)</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00052"/>00052 <emphasis role="preprocessor">&#32;&#32;#error&#32;&quot;Please&#32;use&#32;ARM&#32;Compiler&#32;Toolchain&#32;V4.0.677&#32;or&#32;later!&quot;</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00053"/>00053 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00054"/>00054 
<anchor xml:id="_core__cm_func_8h_source_1l00055"/>00055 <emphasis role="comment">/*&#32;intrinsic&#32;void&#32;__enable_irq();&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00056"/>00056 <emphasis role="comment">/*&#32;intrinsic&#32;void&#32;__disable_irq();&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00057"/>00057 
<anchor xml:id="_core__cm_func_8h_source_1l00064"/>00064 __STATIC_INLINE&#32;uint32_t&#32;__get_CONTROL(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00065"/>00065 {
<anchor xml:id="_core__cm_func_8h_source_1l00066"/>00066 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regControl&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;control&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00067"/>00067 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regControl);
<anchor xml:id="_core__cm_func_8h_source_1l00068"/>00068 }
<anchor xml:id="_core__cm_func_8h_source_1l00069"/>00069 
<anchor xml:id="_core__cm_func_8h_source_1l00070"/>00070 
<anchor xml:id="_core__cm_func_8h_source_1l00077"/>00077 __STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_CONTROL(uint32_t&#32;control)
<anchor xml:id="_core__cm_func_8h_source_1l00078"/>00078 {
<anchor xml:id="_core__cm_func_8h_source_1l00079"/>00079 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regControl&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;control&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00080"/>00080 &#32;&#32;__regControl&#32;=&#32;control;
<anchor xml:id="_core__cm_func_8h_source_1l00081"/>00081 }
<anchor xml:id="_core__cm_func_8h_source_1l00082"/>00082 
<anchor xml:id="_core__cm_func_8h_source_1l00083"/>00083 
<anchor xml:id="_core__cm_func_8h_source_1l00090"/>00090 __STATIC_INLINE&#32;uint32_t&#32;__get_IPSR(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00091"/>00091 {
<anchor xml:id="_core__cm_func_8h_source_1l00092"/>00092 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regIPSR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;ipsr&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00093"/>00093 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regIPSR);
<anchor xml:id="_core__cm_func_8h_source_1l00094"/>00094 }
<anchor xml:id="_core__cm_func_8h_source_1l00095"/>00095 
<anchor xml:id="_core__cm_func_8h_source_1l00096"/>00096 
<anchor xml:id="_core__cm_func_8h_source_1l00103"/>00103 __STATIC_INLINE&#32;uint32_t&#32;__get_APSR(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00104"/>00104 {
<anchor xml:id="_core__cm_func_8h_source_1l00105"/>00105 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regAPSR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;apsr&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00106"/>00106 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regAPSR);
<anchor xml:id="_core__cm_func_8h_source_1l00107"/>00107 }
<anchor xml:id="_core__cm_func_8h_source_1l00108"/>00108 
<anchor xml:id="_core__cm_func_8h_source_1l00109"/>00109 
<anchor xml:id="_core__cm_func_8h_source_1l00116"/>00116 __STATIC_INLINE&#32;uint32_t&#32;__get_xPSR(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00117"/>00117 {
<anchor xml:id="_core__cm_func_8h_source_1l00118"/>00118 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regXPSR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;xpsr&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00119"/>00119 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regXPSR);
<anchor xml:id="_core__cm_func_8h_source_1l00120"/>00120 }
<anchor xml:id="_core__cm_func_8h_source_1l00121"/>00121 
<anchor xml:id="_core__cm_func_8h_source_1l00122"/>00122 
<anchor xml:id="_core__cm_func_8h_source_1l00129"/>00129 __STATIC_INLINE&#32;uint32_t&#32;__get_PSP(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00130"/>00130 {
<anchor xml:id="_core__cm_func_8h_source_1l00131"/>00131 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regProcessStackPointer&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;psp&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00132"/>00132 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regProcessStackPointer);
<anchor xml:id="_core__cm_func_8h_source_1l00133"/>00133 }
<anchor xml:id="_core__cm_func_8h_source_1l00134"/>00134 
<anchor xml:id="_core__cm_func_8h_source_1l00135"/>00135 
<anchor xml:id="_core__cm_func_8h_source_1l00142"/>00142 __STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_PSP(uint32_t&#32;topOfProcStack)
<anchor xml:id="_core__cm_func_8h_source_1l00143"/>00143 {
<anchor xml:id="_core__cm_func_8h_source_1l00144"/>00144 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regProcessStackPointer&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;psp&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00145"/>00145 &#32;&#32;__regProcessStackPointer&#32;=&#32;topOfProcStack;
<anchor xml:id="_core__cm_func_8h_source_1l00146"/>00146 }
<anchor xml:id="_core__cm_func_8h_source_1l00147"/>00147 
<anchor xml:id="_core__cm_func_8h_source_1l00148"/>00148 
<anchor xml:id="_core__cm_func_8h_source_1l00155"/>00155 __STATIC_INLINE&#32;uint32_t&#32;__get_MSP(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00156"/>00156 {
<anchor xml:id="_core__cm_func_8h_source_1l00157"/>00157 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regMainStackPointer&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;msp&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00158"/>00158 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regMainStackPointer);
<anchor xml:id="_core__cm_func_8h_source_1l00159"/>00159 }
<anchor xml:id="_core__cm_func_8h_source_1l00160"/>00160 
<anchor xml:id="_core__cm_func_8h_source_1l00161"/>00161 
<anchor xml:id="_core__cm_func_8h_source_1l00168"/>00168 __STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_MSP(uint32_t&#32;topOfMainStack)
<anchor xml:id="_core__cm_func_8h_source_1l00169"/>00169 {
<anchor xml:id="_core__cm_func_8h_source_1l00170"/>00170 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regMainStackPointer&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;msp&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00171"/>00171 &#32;&#32;__regMainStackPointer&#32;=&#32;topOfMainStack;
<anchor xml:id="_core__cm_func_8h_source_1l00172"/>00172 }
<anchor xml:id="_core__cm_func_8h_source_1l00173"/>00173 
<anchor xml:id="_core__cm_func_8h_source_1l00174"/>00174 
<anchor xml:id="_core__cm_func_8h_source_1l00181"/>00181 __STATIC_INLINE&#32;uint32_t&#32;__get_PRIMASK(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00182"/>00182 {
<anchor xml:id="_core__cm_func_8h_source_1l00183"/>00183 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regPriMask&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;primask&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00184"/>00184 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regPriMask);
<anchor xml:id="_core__cm_func_8h_source_1l00185"/>00185 }
<anchor xml:id="_core__cm_func_8h_source_1l00186"/>00186 
<anchor xml:id="_core__cm_func_8h_source_1l00187"/>00187 
<anchor xml:id="_core__cm_func_8h_source_1l00194"/>00194 __STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_PRIMASK(uint32_t&#32;priMask)
<anchor xml:id="_core__cm_func_8h_source_1l00195"/>00195 {
<anchor xml:id="_core__cm_func_8h_source_1l00196"/>00196 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regPriMask&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;primask&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00197"/>00197 &#32;&#32;__regPriMask&#32;=&#32;(priMask);
<anchor xml:id="_core__cm_func_8h_source_1l00198"/>00198 }
<anchor xml:id="_core__cm_func_8h_source_1l00199"/>00199 
<anchor xml:id="_core__cm_func_8h_source_1l00200"/>00200 
<anchor xml:id="_core__cm_func_8h_source_1l00201"/>00201 <emphasis role="preprocessor">#if&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__CORTEX_M&#32;&gt;=&#32;0x03)</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00202"/>00202 
<anchor xml:id="_core__cm_func_8h_source_1l00208"/>00208 <emphasis role="preprocessor">#define&#32;__enable_fault_irq&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__enable_fiq</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00209"/>00209 
<anchor xml:id="_core__cm_func_8h_source_1l00210"/>00210 
<anchor xml:id="_core__cm_func_8h_source_1l00216"/>00216 <emphasis role="preprocessor">#define&#32;__disable_fault_irq&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__disable_fiq</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00217"/>00217 
<anchor xml:id="_core__cm_func_8h_source_1l00218"/>00218 
<anchor xml:id="_core__cm_func_8h_source_1l00225"/>00225 __STATIC_INLINE&#32;uint32_t&#32;&#32;__get_BASEPRI(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00226"/>00226 {
<anchor xml:id="_core__cm_func_8h_source_1l00227"/>00227 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regBasePri&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;basepri&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00228"/>00228 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regBasePri);
<anchor xml:id="_core__cm_func_8h_source_1l00229"/>00229 }
<anchor xml:id="_core__cm_func_8h_source_1l00230"/>00230 
<anchor xml:id="_core__cm_func_8h_source_1l00231"/>00231 
<anchor xml:id="_core__cm_func_8h_source_1l00238"/>00238 __STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_BASEPRI(uint32_t&#32;basePri)
<anchor xml:id="_core__cm_func_8h_source_1l00239"/>00239 {
<anchor xml:id="_core__cm_func_8h_source_1l00240"/>00240 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regBasePri&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;basepri&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00241"/>00241 &#32;&#32;__regBasePri&#32;=&#32;(basePri&#32;&amp;&#32;0xff);
<anchor xml:id="_core__cm_func_8h_source_1l00242"/>00242 }
<anchor xml:id="_core__cm_func_8h_source_1l00243"/>00243 
<anchor xml:id="_core__cm_func_8h_source_1l00244"/>00244 
<anchor xml:id="_core__cm_func_8h_source_1l00251"/>00251 __STATIC_INLINE&#32;uint32_t&#32;__get_FAULTMASK(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00252"/>00252 {
<anchor xml:id="_core__cm_func_8h_source_1l00253"/>00253 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regFaultMask&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;faultmask&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00254"/>00254 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regFaultMask);
<anchor xml:id="_core__cm_func_8h_source_1l00255"/>00255 }
<anchor xml:id="_core__cm_func_8h_source_1l00256"/>00256 
<anchor xml:id="_core__cm_func_8h_source_1l00257"/>00257 
<anchor xml:id="_core__cm_func_8h_source_1l00264"/>00264 __STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_FAULTMASK(uint32_t&#32;faultMask)
<anchor xml:id="_core__cm_func_8h_source_1l00265"/>00265 {
<anchor xml:id="_core__cm_func_8h_source_1l00266"/>00266 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regFaultMask&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;faultmask&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00267"/>00267 &#32;&#32;__regFaultMask&#32;=&#32;(faultMask&#32;&amp;&#32;(uint32_t)1);
<anchor xml:id="_core__cm_func_8h_source_1l00268"/>00268 }
<anchor xml:id="_core__cm_func_8h_source_1l00269"/>00269 
<anchor xml:id="_core__cm_func_8h_source_1l00270"/>00270 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;(__CORTEX_M&#32;&gt;=&#32;0x03)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00271"/>00271 
<anchor xml:id="_core__cm_func_8h_source_1l00272"/>00272 
<anchor xml:id="_core__cm_func_8h_source_1l00273"/>00273 <emphasis role="preprocessor">#if&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__CORTEX_M&#32;==&#32;0x04)</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00274"/>00274 
<anchor xml:id="_core__cm_func_8h_source_1l00281"/>00281 __STATIC_INLINE&#32;uint32_t&#32;__get_FPSCR(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00282"/>00282 {
<anchor xml:id="_core__cm_func_8h_source_1l00283"/>00283 <emphasis role="preprocessor">#if&#32;(__FPU_PRESENT&#32;==&#32;1)&#32;&amp;&amp;&#32;(__FPU_USED&#32;==&#32;1)</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00284"/>00284 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regfpscr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;fpscr&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00285"/>00285 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regfpscr);
<anchor xml:id="_core__cm_func_8h_source_1l00286"/>00286 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00287"/>00287 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(0);
<anchor xml:id="_core__cm_func_8h_source_1l00288"/>00288 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00289"/>00289 }
<anchor xml:id="_core__cm_func_8h_source_1l00290"/>00290 
<anchor xml:id="_core__cm_func_8h_source_1l00291"/>00291 
<anchor xml:id="_core__cm_func_8h_source_1l00298"/>00298 __STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_FPSCR(uint32_t&#32;fpscr)
<anchor xml:id="_core__cm_func_8h_source_1l00299"/>00299 {
<anchor xml:id="_core__cm_func_8h_source_1l00300"/>00300 <emphasis role="preprocessor">#if&#32;(__FPU_PRESENT&#32;==&#32;1)&#32;&amp;&amp;&#32;(__FPU_USED&#32;==&#32;1)</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00301"/>00301 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regfpscr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;fpscr&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00302"/>00302 &#32;&#32;__regfpscr&#32;=&#32;(fpscr);
<anchor xml:id="_core__cm_func_8h_source_1l00303"/>00303 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00304"/>00304 }
<anchor xml:id="_core__cm_func_8h_source_1l00305"/>00305 
<anchor xml:id="_core__cm_func_8h_source_1l00306"/>00306 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;(__CORTEX_M&#32;==&#32;0x04)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00307"/>00307 
<anchor xml:id="_core__cm_func_8h_source_1l00308"/>00308 
<anchor xml:id="_core__cm_func_8h_source_1l00309"/>00309 <emphasis role="preprocessor">#elif&#32;defined&#32;(&#32;__ICCARM__&#32;)&#32;</emphasis><emphasis role="comment">/*------------------&#32;ICC&#32;Compiler&#32;-------------------*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00310"/>00310 <emphasis role="comment">/*&#32;IAR&#32;iccarm&#32;specific&#32;functions&#32;*/</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00311"/>00311 
<anchor xml:id="_core__cm_func_8h_source_1l00312"/>00312 <emphasis role="preprocessor">#include&#32;&lt;cmsis_iar.h&gt;</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00313"/>00313 
<anchor xml:id="_core__cm_func_8h_source_1l00314"/>00314 
<anchor xml:id="_core__cm_func_8h_source_1l00315"/>00315 <emphasis role="preprocessor">#elif&#32;defined&#32;(&#32;__TMS470__&#32;)&#32;</emphasis><emphasis role="comment">/*----------------&#32;TI&#32;CCS&#32;Compiler&#32;------------------*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00316"/>00316 <emphasis role="comment">/*&#32;TI&#32;CCS&#32;specific&#32;functions&#32;*/</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00317"/>00317 
<anchor xml:id="_core__cm_func_8h_source_1l00318"/>00318 <emphasis role="preprocessor">#include&#32;&lt;cmsis_ccs.h&gt;</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00319"/>00319 
<anchor xml:id="_core__cm_func_8h_source_1l00320"/>00320 
<anchor xml:id="_core__cm_func_8h_source_1l00321"/>00321 <emphasis role="preprocessor">#elif&#32;defined&#32;(&#32;__GNUC__&#32;)&#32;</emphasis><emphasis role="comment">/*------------------&#32;GNU&#32;Compiler&#32;---------------------*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00322"/>00322 <emphasis role="comment">/*&#32;GNU&#32;gcc&#32;specific&#32;functions&#32;*/</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00323"/>00323 
<anchor xml:id="_core__cm_func_8h_source_1l00329"/>00329 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__enable_irq(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00330"/>00330 {
<anchor xml:id="_core__cm_func_8h_source_1l00331"/>00331 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;cpsie&#32;i&quot;</emphasis>&#32;:&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00332"/>00332 }
<anchor xml:id="_core__cm_func_8h_source_1l00333"/>00333 
<anchor xml:id="_core__cm_func_8h_source_1l00334"/>00334 
<anchor xml:id="_core__cm_func_8h_source_1l00340"/>00340 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__disable_irq(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00341"/>00341 {
<anchor xml:id="_core__cm_func_8h_source_1l00342"/>00342 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;cpsid&#32;i&quot;</emphasis>&#32;:&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00343"/>00343 }
<anchor xml:id="_core__cm_func_8h_source_1l00344"/>00344 
<anchor xml:id="_core__cm_func_8h_source_1l00345"/>00345 
<anchor xml:id="_core__cm_func_8h_source_1l00352"/>00352 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;uint32_t&#32;__get_CONTROL(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00353"/>00353 {
<anchor xml:id="_core__cm_func_8h_source_1l00354"/>00354 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_core__cm_func_8h_source_1l00355"/>00355 
<anchor xml:id="_core__cm_func_8h_source_1l00356"/>00356 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;control&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_core__cm_func_8h_source_1l00357"/>00357 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_core__cm_func_8h_source_1l00358"/>00358 }
<anchor xml:id="_core__cm_func_8h_source_1l00359"/>00359 
<anchor xml:id="_core__cm_func_8h_source_1l00360"/>00360 
<anchor xml:id="_core__cm_func_8h_source_1l00367"/>00367 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_CONTROL(uint32_t&#32;control)
<anchor xml:id="_core__cm_func_8h_source_1l00368"/>00368 {
<anchor xml:id="_core__cm_func_8h_source_1l00369"/>00369 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;control,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(control)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00370"/>00370 }
<anchor xml:id="_core__cm_func_8h_source_1l00371"/>00371 
<anchor xml:id="_core__cm_func_8h_source_1l00372"/>00372 
<anchor xml:id="_core__cm_func_8h_source_1l00379"/>00379 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;uint32_t&#32;__get_IPSR(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00380"/>00380 {
<anchor xml:id="_core__cm_func_8h_source_1l00381"/>00381 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_core__cm_func_8h_source_1l00382"/>00382 
<anchor xml:id="_core__cm_func_8h_source_1l00383"/>00383 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;ipsr&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_core__cm_func_8h_source_1l00384"/>00384 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_core__cm_func_8h_source_1l00385"/>00385 }
<anchor xml:id="_core__cm_func_8h_source_1l00386"/>00386 
<anchor xml:id="_core__cm_func_8h_source_1l00387"/>00387 
<anchor xml:id="_core__cm_func_8h_source_1l00394"/>00394 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;uint32_t&#32;__get_APSR(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00395"/>00395 {
<anchor xml:id="_core__cm_func_8h_source_1l00396"/>00396 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_core__cm_func_8h_source_1l00397"/>00397 
<anchor xml:id="_core__cm_func_8h_source_1l00398"/>00398 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;apsr&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_core__cm_func_8h_source_1l00399"/>00399 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_core__cm_func_8h_source_1l00400"/>00400 }
<anchor xml:id="_core__cm_func_8h_source_1l00401"/>00401 
<anchor xml:id="_core__cm_func_8h_source_1l00402"/>00402 
<anchor xml:id="_core__cm_func_8h_source_1l00409"/>00409 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;uint32_t&#32;__get_xPSR(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00410"/>00410 {
<anchor xml:id="_core__cm_func_8h_source_1l00411"/>00411 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_core__cm_func_8h_source_1l00412"/>00412 
<anchor xml:id="_core__cm_func_8h_source_1l00413"/>00413 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;xpsr&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_core__cm_func_8h_source_1l00414"/>00414 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_core__cm_func_8h_source_1l00415"/>00415 }
<anchor xml:id="_core__cm_func_8h_source_1l00416"/>00416 
<anchor xml:id="_core__cm_func_8h_source_1l00417"/>00417 
<anchor xml:id="_core__cm_func_8h_source_1l00424"/>00424 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;uint32_t&#32;__get_PSP(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00425"/>00425 {
<anchor xml:id="_core__cm_func_8h_source_1l00426"/>00426 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;result;
<anchor xml:id="_core__cm_func_8h_source_1l00427"/>00427 
<anchor xml:id="_core__cm_func_8h_source_1l00428"/>00428 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;psp\n&quot;</emphasis>&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_core__cm_func_8h_source_1l00429"/>00429 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_core__cm_func_8h_source_1l00430"/>00430 }
<anchor xml:id="_core__cm_func_8h_source_1l00431"/>00431 
<anchor xml:id="_core__cm_func_8h_source_1l00432"/>00432 
<anchor xml:id="_core__cm_func_8h_source_1l00439"/>00439 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_PSP(uint32_t&#32;topOfProcStack)
<anchor xml:id="_core__cm_func_8h_source_1l00440"/>00440 {
<anchor xml:id="_core__cm_func_8h_source_1l00441"/>00441 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;psp,&#32;%0\n&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(topOfProcStack)&#32;:&#32;<emphasis role="stringliteral">&quot;sp&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00442"/>00442 }
<anchor xml:id="_core__cm_func_8h_source_1l00443"/>00443 
<anchor xml:id="_core__cm_func_8h_source_1l00444"/>00444 
<anchor xml:id="_core__cm_func_8h_source_1l00451"/>00451 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;uint32_t&#32;__get_MSP(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00452"/>00452 {
<anchor xml:id="_core__cm_func_8h_source_1l00453"/>00453 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;result;
<anchor xml:id="_core__cm_func_8h_source_1l00454"/>00454 
<anchor xml:id="_core__cm_func_8h_source_1l00455"/>00455 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;msp\n&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_core__cm_func_8h_source_1l00456"/>00456 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_core__cm_func_8h_source_1l00457"/>00457 }
<anchor xml:id="_core__cm_func_8h_source_1l00458"/>00458 
<anchor xml:id="_core__cm_func_8h_source_1l00459"/>00459 
<anchor xml:id="_core__cm_func_8h_source_1l00466"/>00466 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_MSP(uint32_t&#32;topOfMainStack)
<anchor xml:id="_core__cm_func_8h_source_1l00467"/>00467 {
<anchor xml:id="_core__cm_func_8h_source_1l00468"/>00468 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;msp,&#32;%0\n&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(topOfMainStack)&#32;:&#32;<emphasis role="stringliteral">&quot;sp&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00469"/>00469 }
<anchor xml:id="_core__cm_func_8h_source_1l00470"/>00470 
<anchor xml:id="_core__cm_func_8h_source_1l00471"/>00471 
<anchor xml:id="_core__cm_func_8h_source_1l00478"/>00478 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;uint32_t&#32;__get_PRIMASK(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00479"/>00479 {
<anchor xml:id="_core__cm_func_8h_source_1l00480"/>00480 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_core__cm_func_8h_source_1l00481"/>00481 
<anchor xml:id="_core__cm_func_8h_source_1l00482"/>00482 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;primask&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_core__cm_func_8h_source_1l00483"/>00483 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_core__cm_func_8h_source_1l00484"/>00484 }
<anchor xml:id="_core__cm_func_8h_source_1l00485"/>00485 
<anchor xml:id="_core__cm_func_8h_source_1l00486"/>00486 
<anchor xml:id="_core__cm_func_8h_source_1l00493"/>00493 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_PRIMASK(uint32_t&#32;priMask)
<anchor xml:id="_core__cm_func_8h_source_1l00494"/>00494 {
<anchor xml:id="_core__cm_func_8h_source_1l00495"/>00495 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;primask,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(priMask)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00496"/>00496 }
<anchor xml:id="_core__cm_func_8h_source_1l00497"/>00497 
<anchor xml:id="_core__cm_func_8h_source_1l00498"/>00498 
<anchor xml:id="_core__cm_func_8h_source_1l00499"/>00499 <emphasis role="preprocessor">#if&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__CORTEX_M&#32;&gt;=&#32;0x03)</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00500"/>00500 
<anchor xml:id="_core__cm_func_8h_source_1l00506"/>00506 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__enable_fault_irq(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00507"/>00507 {
<anchor xml:id="_core__cm_func_8h_source_1l00508"/>00508 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;cpsie&#32;f&quot;</emphasis>&#32;:&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00509"/>00509 }
<anchor xml:id="_core__cm_func_8h_source_1l00510"/>00510 
<anchor xml:id="_core__cm_func_8h_source_1l00511"/>00511 
<anchor xml:id="_core__cm_func_8h_source_1l00517"/>00517 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__disable_fault_irq(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00518"/>00518 {
<anchor xml:id="_core__cm_func_8h_source_1l00519"/>00519 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;cpsid&#32;f&quot;</emphasis>&#32;:&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00520"/>00520 }
<anchor xml:id="_core__cm_func_8h_source_1l00521"/>00521 
<anchor xml:id="_core__cm_func_8h_source_1l00522"/>00522 
<anchor xml:id="_core__cm_func_8h_source_1l00529"/>00529 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;uint32_t&#32;__get_BASEPRI(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00530"/>00530 {
<anchor xml:id="_core__cm_func_8h_source_1l00531"/>00531 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_core__cm_func_8h_source_1l00532"/>00532 
<anchor xml:id="_core__cm_func_8h_source_1l00533"/>00533 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;basepri_max&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_core__cm_func_8h_source_1l00534"/>00534 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_core__cm_func_8h_source_1l00535"/>00535 }
<anchor xml:id="_core__cm_func_8h_source_1l00536"/>00536 
<anchor xml:id="_core__cm_func_8h_source_1l00537"/>00537 
<anchor xml:id="_core__cm_func_8h_source_1l00544"/>00544 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_BASEPRI(uint32_t&#32;value)
<anchor xml:id="_core__cm_func_8h_source_1l00545"/>00545 {
<anchor xml:id="_core__cm_func_8h_source_1l00546"/>00546 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;basepri,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(value)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00547"/>00547 }
<anchor xml:id="_core__cm_func_8h_source_1l00548"/>00548 
<anchor xml:id="_core__cm_func_8h_source_1l00549"/>00549 
<anchor xml:id="_core__cm_func_8h_source_1l00556"/>00556 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;uint32_t&#32;__get_FAULTMASK(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00557"/>00557 {
<anchor xml:id="_core__cm_func_8h_source_1l00558"/>00558 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_core__cm_func_8h_source_1l00559"/>00559 
<anchor xml:id="_core__cm_func_8h_source_1l00560"/>00560 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;faultmask&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_core__cm_func_8h_source_1l00561"/>00561 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_core__cm_func_8h_source_1l00562"/>00562 }
<anchor xml:id="_core__cm_func_8h_source_1l00563"/>00563 
<anchor xml:id="_core__cm_func_8h_source_1l00564"/>00564 
<anchor xml:id="_core__cm_func_8h_source_1l00571"/>00571 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_FAULTMASK(uint32_t&#32;faultMask)
<anchor xml:id="_core__cm_func_8h_source_1l00572"/>00572 {
<anchor xml:id="_core__cm_func_8h_source_1l00573"/>00573 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;faultmask,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(faultMask)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00574"/>00574 }
<anchor xml:id="_core__cm_func_8h_source_1l00575"/>00575 
<anchor xml:id="_core__cm_func_8h_source_1l00576"/>00576 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;(__CORTEX_M&#32;&gt;=&#32;0x03)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00577"/>00577 
<anchor xml:id="_core__cm_func_8h_source_1l00578"/>00578 
<anchor xml:id="_core__cm_func_8h_source_1l00579"/>00579 <emphasis role="preprocessor">#if&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__CORTEX_M&#32;==&#32;0x04)</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00580"/>00580 
<anchor xml:id="_core__cm_func_8h_source_1l00587"/>00587 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;uint32_t&#32;__get_FPSCR(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_core__cm_func_8h_source_1l00588"/>00588 {
<anchor xml:id="_core__cm_func_8h_source_1l00589"/>00589 <emphasis role="preprocessor">#if&#32;(__FPU_PRESENT&#32;==&#32;1)&#32;&amp;&amp;&#32;(__FPU_USED&#32;==&#32;1)</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00590"/>00590 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_core__cm_func_8h_source_1l00591"/>00591 
<anchor xml:id="_core__cm_func_8h_source_1l00592"/>00592 &#32;&#32;<emphasis role="comment">/*&#32;Empty&#32;asm&#32;statement&#32;works&#32;as&#32;a&#32;scheduling&#32;barrier&#32;*/</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00593"/>00593 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00594"/>00594 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;VMRS&#32;%0,&#32;fpscr&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_core__cm_func_8h_source_1l00595"/>00595 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00596"/>00596 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_core__cm_func_8h_source_1l00597"/>00597 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00598"/>00598 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(0);
<anchor xml:id="_core__cm_func_8h_source_1l00599"/>00599 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00600"/>00600 }
<anchor xml:id="_core__cm_func_8h_source_1l00601"/>00601 
<anchor xml:id="_core__cm_func_8h_source_1l00602"/>00602 
<anchor xml:id="_core__cm_func_8h_source_1l00609"/>00609 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;__STATIC_INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_FPSCR(uint32_t&#32;fpscr)
<anchor xml:id="_core__cm_func_8h_source_1l00610"/>00610 {
<anchor xml:id="_core__cm_func_8h_source_1l00611"/>00611 <emphasis role="preprocessor">#if&#32;(__FPU_PRESENT&#32;==&#32;1)&#32;&amp;&amp;&#32;(__FPU_USED&#32;==&#32;1)</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00612"/>00612 &#32;&#32;<emphasis role="comment">/*&#32;Empty&#32;asm&#32;statement&#32;works&#32;as&#32;a&#32;scheduling&#32;barrier&#32;*/</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00613"/>00613 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00614"/>00614 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;VMSR&#32;fpscr,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(fpscr)&#32;:&#32;<emphasis role="stringliteral">&quot;vfpcc&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00615"/>00615 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_core__cm_func_8h_source_1l00616"/>00616 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00617"/>00617 }
<anchor xml:id="_core__cm_func_8h_source_1l00618"/>00618 
<anchor xml:id="_core__cm_func_8h_source_1l00619"/>00619 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;(__CORTEX_M&#32;==&#32;0x04)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00620"/>00620 
<anchor xml:id="_core__cm_func_8h_source_1l00621"/>00621 
<anchor xml:id="_core__cm_func_8h_source_1l00622"/>00622 <emphasis role="preprocessor">#elif&#32;defined&#32;(&#32;__TASKING__&#32;)&#32;</emphasis><emphasis role="comment">/*------------------&#32;TASKING&#32;Compiler&#32;--------------*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00623"/>00623 <emphasis role="comment">/*&#32;TASKING&#32;carm&#32;specific&#32;functions&#32;*/</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00624"/>00624 
<anchor xml:id="_core__cm_func_8h_source_1l00625"/>00625 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00626"/>00626 <emphasis role="comment">&#32;*&#32;The&#32;CMSIS&#32;functions&#32;have&#32;been&#32;implemented&#32;as&#32;intrinsics&#32;in&#32;the&#32;compiler.</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00627"/>00627 <emphasis role="comment">&#32;*&#32;Please&#32;use&#32;&quot;carm&#32;-?i&quot;&#32;to&#32;get&#32;an&#32;up&#32;to&#32;date&#32;list&#32;of&#32;all&#32;instrinsics,</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00628"/>00628 <emphasis role="comment">&#32;*&#32;Including&#32;the&#32;CMSIS&#32;ones.</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00629"/>00629 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00630"/>00630 
<anchor xml:id="_core__cm_func_8h_source_1l00631"/>00631 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_core__cm_func_8h_source_1l00632"/>00632 
<anchor xml:id="_core__cm_func_8h_source_1l00636"/>00636 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__CORE_CMFUNC_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
