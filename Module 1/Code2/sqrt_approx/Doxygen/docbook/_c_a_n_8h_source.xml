<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__c_a_n_8h_source" xml:lang="en-US">
<title>CAN.h</title>
<indexterm><primary>C:/Users/dayton.flores/OneDrive/Documents/School/CU/ECEN 5803/Project 1/Module 1/Code2/sqrt_approx/mbed/CAN.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__c_a_n_8h_source_1l00001"/>00001 <emphasis role="comment">/*&#32;mbed&#32;Microcontroller&#32;Library</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00002"/>00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;2006-2013&#32;ARM&#32;Limited</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00003"/>00003 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00004"/>00004 <emphasis role="comment">&#32;*&#32;Licensed&#32;under&#32;the&#32;Apache&#32;License,&#32;Version&#32;2.0&#32;(the&#32;&quot;License&quot;);</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00005"/>00005 <emphasis role="comment">&#32;*&#32;you&#32;may&#32;not&#32;use&#32;this&#32;file&#32;except&#32;in&#32;compliance&#32;with&#32;the&#32;License.</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00006"/>00006 <emphasis role="comment">&#32;*&#32;You&#32;may&#32;obtain&#32;a&#32;copy&#32;of&#32;the&#32;License&#32;at</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00007"/>00007 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00008"/>00008 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;http://www.apache.org/licenses/LICENSE-2.0</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00009"/>00009 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00010"/>00010 <emphasis role="comment">&#32;*&#32;Unless&#32;required&#32;by&#32;applicable&#32;law&#32;or&#32;agreed&#32;to&#32;in&#32;writing,&#32;software</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00011"/>00011 <emphasis role="comment">&#32;*&#32;distributed&#32;under&#32;the&#32;License&#32;is&#32;distributed&#32;on&#32;an&#32;&quot;AS&#32;IS&quot;&#32;BASIS,</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00012"/>00012 <emphasis role="comment">&#32;*&#32;WITHOUT&#32;WARRANTIES&#32;OR&#32;CONDITIONS&#32;OF&#32;ANY&#32;KIND,&#32;either&#32;express&#32;or&#32;implied.</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00013"/>00013 <emphasis role="comment">&#32;*&#32;See&#32;the&#32;License&#32;for&#32;the&#32;specific&#32;language&#32;governing&#32;permissions&#32;and</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00014"/>00014 <emphasis role="comment">&#32;*&#32;limitations&#32;under&#32;the&#32;License.</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00015"/>00015 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00016"/>00016 <emphasis role="preprocessor">#ifndef&#32;MBED_CAN_H</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00017"/>00017 <emphasis role="preprocessor">#define&#32;MBED_CAN_H</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00018"/>00018 
<anchor xml:id="__c_a_n_8h_source_1l00019"/>00019 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_platform_8h">platform.h</link>&quot;</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00020"/>00020 
<anchor xml:id="__c_a_n_8h_source_1l00021"/>00021 <emphasis role="preprocessor">#if&#32;DEVICE_CAN</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00022"/>00022 
<anchor xml:id="__c_a_n_8h_source_1l00023"/>00023 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_can__api_8h">can_api.h</link>&quot;</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00024"/>00024 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_can__helper_8h">can_helper.h</link>&quot;</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00025"/>00025 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__function_pointer_8h">FunctionPointer.h</link>&quot;</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00026"/>00026 
<anchor xml:id="__c_a_n_8h_source_1l00027"/>00027 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacembed">mbed</link>&#32;{
<anchor xml:id="__c_a_n_8h_source_1l00028"/>00028 
<anchor xml:id="__c_a_n_8h_source_1l00031"/>00031 <emphasis role="keyword">class&#32;</emphasis>CANMessage&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;CAN_Message&#32;{
<anchor xml:id="__c_a_n_8h_source_1l00032"/>00032 
<anchor xml:id="__c_a_n_8h_source_1l00033"/>00033 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="__c_a_n_8h_source_1l00036"/>00036 &#32;&#32;&#32;&#32;CANMessage()&#32;:&#32;CAN_Message()&#32;{
<anchor xml:id="__c_a_n_8h_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;len&#32;&#32;&#32;&#32;=&#32;8;
<anchor xml:id="__c_a_n_8h_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type&#32;&#32;&#32;=&#32;CANData;
<anchor xml:id="__c_a_n_8h_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;format&#32;=&#32;CANStandard;
<anchor xml:id="__c_a_n_8h_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">id</emphasis>&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__c_a_n_8h_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(data,&#32;0,&#32;8);
<anchor xml:id="__c_a_n_8h_source_1l00042"/>00042 &#32;&#32;&#32;&#32;}
<anchor xml:id="__c_a_n_8h_source_1l00043"/>00043 
<anchor xml:id="__c_a_n_8h_source_1l00046"/>00046 &#32;&#32;&#32;&#32;CANMessage(<emphasis role="keywordtype">int</emphasis>&#32;_id,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*_data,&#32;<emphasis role="keywordtype">char</emphasis>&#32;_len&#32;=&#32;8,&#32;CANType&#32;_type&#32;=&#32;CANData,&#32;CANFormat&#32;_format&#32;=&#32;CANStandard)&#32;{
<anchor xml:id="__c_a_n_8h_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;len&#32;&#32;&#32;&#32;=&#32;_len&#32;&amp;&#32;0xF;
<anchor xml:id="__c_a_n_8h_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;type&#32;&#32;&#32;=&#32;_type;
<anchor xml:id="__c_a_n_8h_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;format&#32;=&#32;_format;
<anchor xml:id="__c_a_n_8h_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">id</emphasis>&#32;&#32;&#32;&#32;&#32;=&#32;_id;
<anchor xml:id="__c_a_n_8h_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;memcpy(data,&#32;_data,&#32;_len);
<anchor xml:id="__c_a_n_8h_source_1l00052"/>00052 &#32;&#32;&#32;&#32;}
<anchor xml:id="__c_a_n_8h_source_1l00053"/>00053 
<anchor xml:id="__c_a_n_8h_source_1l00056"/>00056 &#32;&#32;&#32;&#32;CANMessage(<emphasis role="keywordtype">int</emphasis>&#32;_id,&#32;CANFormat&#32;_format&#32;=&#32;CANStandard)&#32;{
<anchor xml:id="__c_a_n_8h_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;len&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__c_a_n_8h_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;type&#32;&#32;&#32;=&#32;CANRemote;
<anchor xml:id="__c_a_n_8h_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;format&#32;=&#32;_format;
<anchor xml:id="__c_a_n_8h_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">id</emphasis>&#32;&#32;&#32;&#32;&#32;=&#32;_id;
<anchor xml:id="__c_a_n_8h_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;memset(data,&#32;0,&#32;8);
<anchor xml:id="__c_a_n_8h_source_1l00062"/>00062 &#32;&#32;&#32;&#32;}
<anchor xml:id="__c_a_n_8h_source_1l00063"/>00063 };
<anchor xml:id="__c_a_n_8h_source_1l00064"/>00064 
<anchor xml:id="__c_a_n_8h_source_1l00067"/>00067 <emphasis role="keyword">class&#32;</emphasis>CAN&#32;{
<anchor xml:id="__c_a_n_8h_source_1l00068"/>00068 
<anchor xml:id="__c_a_n_8h_source_1l00069"/>00069 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="__c_a_n_8h_source_1l00108"/>00108 &#32;&#32;&#32;&#32;CAN(<link linkend="__pin_names_8h_1a5ceb873075d76667eb54dc6a7d2734d1">PinName</link>&#32;rd,&#32;<link linkend="__pin_names_8h_1a5ceb873075d76667eb54dc6a7d2734d1">PinName</link>&#32;td);
<anchor xml:id="__c_a_n_8h_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~CAN();
<anchor xml:id="__c_a_n_8h_source_1l00110"/>00110 
<anchor xml:id="__c_a_n_8h_source_1l00119"/>00119 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;frequency(<emphasis role="keywordtype">int</emphasis>&#32;hz);
<anchor xml:id="__c_a_n_8h_source_1l00120"/>00120 
<anchor xml:id="__c_a_n_8h_source_1l00129"/>00129 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;write(CANMessage&#32;msg);
<anchor xml:id="__c_a_n_8h_source_1l00130"/>00130 
<anchor xml:id="__c_a_n_8h_source_1l00140"/>00140 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;read(CANMessage&#32;&amp;msg,&#32;<emphasis role="keywordtype">int</emphasis>&#32;handle&#32;=&#32;0);
<anchor xml:id="__c_a_n_8h_source_1l00141"/>00141 
<anchor xml:id="__c_a_n_8h_source_1l00146"/>00146 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reset();
<anchor xml:id="__c_a_n_8h_source_1l00147"/>00147 
<anchor xml:id="__c_a_n_8h_source_1l00152"/>00152 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;monitor(<emphasis role="keywordtype">bool</emphasis>&#32;silent);
<anchor xml:id="__c_a_n_8h_source_1l00153"/>00153 
<anchor xml:id="__c_a_n_8h_source_1l00154"/>00154 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;Mode&#32;{
<anchor xml:id="__c_a_n_8h_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Reset&#32;=&#32;0,
<anchor xml:id="__c_a_n_8h_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Normal,
<anchor xml:id="__c_a_n_8h_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Silent,
<anchor xml:id="__c_a_n_8h_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LocalTest,
<anchor xml:id="__c_a_n_8h_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalTest,
<anchor xml:id="__c_a_n_8h_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SilentTest
<anchor xml:id="__c_a_n_8h_source_1l00161"/>00161 &#32;&#32;&#32;&#32;};
<anchor xml:id="__c_a_n_8h_source_1l00162"/>00162 
<anchor xml:id="__c_a_n_8h_source_1l00171"/>00171 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;mode(Mode&#32;mode);
<anchor xml:id="__c_a_n_8h_source_1l00172"/>00172 
<anchor xml:id="__c_a_n_8h_source_1l00184"/>00184 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;filter(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;mask,&#32;CANFormat&#32;format&#32;=&#32;CANAny,&#32;<emphasis role="keywordtype">int</emphasis>&#32;handle&#32;=&#32;0);
<anchor xml:id="__c_a_n_8h_source_1l00185"/>00185 
<anchor xml:id="__c_a_n_8h_source_1l00188"/>00188 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;rderror();
<anchor xml:id="__c_a_n_8h_source_1l00189"/>00189 
<anchor xml:id="__c_a_n_8h_source_1l00192"/>00192 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;tderror();
<anchor xml:id="__c_a_n_8h_source_1l00193"/>00193 
<anchor xml:id="__c_a_n_8h_source_1l00194"/>00194 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;IrqType&#32;{
<anchor xml:id="__c_a_n_8h_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RxIrq&#32;=&#32;0,
<anchor xml:id="__c_a_n_8h_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TxIrq,
<anchor xml:id="__c_a_n_8h_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EwIrq,
<anchor xml:id="__c_a_n_8h_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DoIrq,
<anchor xml:id="__c_a_n_8h_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WuIrq,
<anchor xml:id="__c_a_n_8h_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EpIrq,
<anchor xml:id="__c_a_n_8h_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AlIrq,
<anchor xml:id="__c_a_n_8h_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BeIrq,
<anchor xml:id="__c_a_n_8h_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IdIrq
<anchor xml:id="__c_a_n_8h_source_1l00204"/>00204 &#32;&#32;&#32;&#32;};
<anchor xml:id="__c_a_n_8h_source_1l00205"/>00205 
<anchor xml:id="__c_a_n_8h_source_1l00212"/>00212 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;attach(<emphasis role="keywordtype">void</emphasis>&#32;(*fptr)(<emphasis role="keywordtype">void</emphasis>),&#32;IrqType&#32;type=RxIrq);
<anchor xml:id="__c_a_n_8h_source_1l00213"/>00213 
<anchor xml:id="__c_a_n_8h_source_1l00221"/>00221 &#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="__c_a_n_8h_source_1l00222"/>00222 &#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;attach(T*&#32;tptr,&#32;<emphasis role="keywordtype">void</emphasis>&#32;(T::*mptr)(<emphasis role="keywordtype">void</emphasis>),&#32;IrqType&#32;type=RxIrq)&#32;{
<anchor xml:id="__c_a_n_8h_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((mptr&#32;!=&#32;NULL)&#32;&amp;&amp;&#32;(tptr&#32;!=&#32;NULL))&#32;{
<anchor xml:id="__c_a_n_8h_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_irq[type].attach(tptr,&#32;mptr);
<anchor xml:id="__c_a_n_8h_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;can_irq_set(&amp;_can,&#32;(CanIrqType)type,&#32;1);
<anchor xml:id="__c_a_n_8h_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__c_a_n_8h_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__c_a_n_8h_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;can_irq_set(&amp;_can,&#32;(CanIrqType)type,&#32;0);
<anchor xml:id="__c_a_n_8h_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__c_a_n_8h_source_1l00230"/>00230 &#32;&#32;&#32;&#32;}
<anchor xml:id="__c_a_n_8h_source_1l00231"/>00231 
<anchor xml:id="__c_a_n_8h_source_1l00232"/>00232 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_irq_handler(uint32_t&#32;<emphasis role="keywordtype">id</emphasis>,&#32;CanIrqType&#32;type);
<anchor xml:id="__c_a_n_8h_source_1l00233"/>00233 
<anchor xml:id="__c_a_n_8h_source_1l00234"/>00234 <emphasis role="keyword">protected</emphasis>:
<anchor xml:id="__c_a_n_8h_source_1l00235"/>00235 &#32;&#32;&#32;&#32;can_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_can;
<anchor xml:id="__c_a_n_8h_source_1l00236"/>00236 &#32;&#32;&#32;&#32;FunctionPointer&#32;_irq[9];
<anchor xml:id="__c_a_n_8h_source_1l00237"/>00237 };
<anchor xml:id="__c_a_n_8h_source_1l00238"/>00238 
<anchor xml:id="__c_a_n_8h_source_1l00239"/>00239 }&#32;<emphasis role="comment">//&#32;namespace&#32;mbed</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00240"/>00240 
<anchor xml:id="__c_a_n_8h_source_1l00241"/>00241 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__c_a_n_8h_source_1l00242"/>00242 
<anchor xml:id="__c_a_n_8h_source_1l00243"/>00243 <emphasis role="preprocessor">#endif&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;MBED_CAN_H</emphasis>
</programlisting></section>
