<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_annotated" xml:lang="en-US">
<title>Data Structures</title>
Here are the data structures with brief descriptions:<link linkend="_struct_____d_m_a___handle_type_def">__DMA_HandleTypeDef</link>
<para>DMA handle Structure definition </para>
<link linkend="_struct_____s_p_i___handle_type_def">__SPI_HandleTypeDef</link>
<para>SPI handle Structure definition </para>
<link linkend="_struct_a_d_c___analog_w_d_g_conf_type_def">ADC_AnalogWDGConfTypeDef</link>
<para>ADC Configuration multi-mode structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_a_d_c___channel_conf_type_def">ADC_ChannelConfTypeDef</link>
<para>ADC Configuration regular Channel structure definition </para>
<link linkend="_struct_a_d_c___common___type_def">ADC_Common_TypeDef</link><link linkend="_struct_a_d_c___handle_type_def">ADC_HandleTypeDef</link>
<para>ADC handle Structure definition </para>
<link linkend="_struct_a_d_c___init_type_def">ADC_InitTypeDef</link>
<para>ADC Init structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_a_d_c___injection_conf_type_def">ADC_InjectionConfTypeDef</link>
<para>ADC Configuration injected Channel structure definition </para>
<link linkend="_struct_a_d_c___multi_mode_type_def">ADC_MultiModeTypeDef</link>
<para>ADC Configuration multi-mode structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_a_d_c___type_def">ADC_TypeDef</link>
<para>Analog to Digital Converter 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_structanalogin__s">analogin_s</link><link linkend="_union_a_p_s_r___type">APSR_Type</link>
<para>Union type to access the Application Program Status Register (APSR) </para>
<link linkend="_classmbed_1_1_bus_in">BusIn</link><link linkend="_classmbed_1_1_bus_in_out">BusInOut</link><link linkend="_classmbed_1_1_bus_out">BusOut</link><link linkend="_classmbed_1_1_call_chain">CallChain</link><link linkend="_union_c_o_n_t_r_o_l___type">CONTROL_Type</link>
<para>Union type to access the Control Registers (CONTROL) </para>
<link linkend="_struct_core_debug___type">CoreDebug_Type</link>
<para>Structure type to access the Core Debug Register (CoreDebug) </para>
<link linkend="_struct_c_r_c___handle_type_def">CRC_HandleTypeDef</link>
<para>CRC handle Structure definition </para>
<link linkend="_struct_c_r_c___type_def">CRC_TypeDef</link>
<para>CRC calculation unit </para>
<link linkend="_struct_d_b_g_m_c_u___type_def">DBGMCU_TypeDef</link>
<para>Debug MCU </para>
<link linkend="_classmbed_1_1_digital_in">DigitalIn</link><link linkend="_classmbed_1_1_digital_in_out">DigitalInOut</link><link linkend="_classmbed_1_1_digital_out">DigitalOut</link><link linkend="_structdirent">dirent</link><link linkend="_classmbed_1_1_dir_handle">DirHandle</link><link linkend="_struct_d_m_a___init_type_def">DMA_InitTypeDef</link>
<para>DMA Configuration Structure definition </para>
<link linkend="_struct_d_m_a___stream___type_def">DMA_Stream_TypeDef</link>
<para>DMA Controller </para>
<link linkend="_struct_d_m_a___type_def">DMA_TypeDef</link><link linkend="_struct_d_w_t___type">DWT_Type</link>
<para>Structure type to access the Data Watchpoint and Trace Register (DWT) </para>
<link linkend="_struct_e_x_t_i___type_def">EXTI_TypeDef</link>
<para>External Interrupt/Event Controller </para>
<link linkend="_classmbed_1_1_file_base">FileBase</link><link linkend="_classmbed_1_1_file_handle">FileHandle</link><link linkend="_classmbed_1_1_file_like">FileLike</link><link linkend="_classmbed_1_1_file_path">FilePath</link><link linkend="_classmbed_1_1_file_system_like">FileSystemLike</link><link linkend="_struct_f_l_a_s_h___adv_o_b_program_init_type_def">FLASH_AdvOBProgramInitTypeDef</link>
<para>FLASH Advanced Option Bytes Program structure definition </para>
<link linkend="_struct_f_l_a_s_h___erase_init_type_def">FLASH_EraseInitTypeDef</link>
<para>FLASH Erase structure definition </para>
<link linkend="_struct_f_l_a_s_h___o_b_program_init_type_def">FLASH_OBProgramInitTypeDef</link>
<para>FLASH Option Bytes Program structure definition </para>
<link linkend="_struct_f_l_a_s_h___process_type_def">FLASH_ProcessTypeDef</link>
<para>FLASH handle Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_f_l_a_s_h___type_def">FLASH_TypeDef</link>
<para>FLASH Registers </para>
<link linkend="_classmbed_1_1_function_pointer">FunctionPointer</link><link linkend="_struct_g_p_i_o___init_type_def">GPIO_InitTypeDef</link>
<para>GPIO Init structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_structgpio__irq__s">gpio_irq_s</link><link linkend="_structgpio__t">gpio_t</link><link linkend="_struct_g_p_i_o___type_def">GPIO_TypeDef</link>
<para>General Purpose I/O </para>
<link linkend="_struct_h_a_l___s_d___card_info_typedef">HAL_SD_CardInfoTypedef</link>
<para>SD Card information structure </para>
<link linkend="_struct_h_a_l___s_d___card_status_typedef">HAL_SD_CardStatusTypedef</link>
<para>SD Card Status returned by ACMD13 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_h_a_l___s_d___c_i_d_typedef">HAL_SD_CIDTypedef</link>
<para>Card Identification Data: CID Register 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_h_a_l___s_d___c_s_d_typedef">HAL_SD_CSDTypedef</link>
<para>Card Specific Data: CSD Register 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_h_c_d___handle_type_def">HCD_HandleTypeDef</link>
<para>HCD Handle Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_i2_c___handle_type_def">I2C_HandleTypeDef</link>
<para>I2C handle Structure definition </para>
<link linkend="_struct_i2_c___init_type_def">I2C_InitTypeDef</link>
<para>I2C Configuration Structure definition </para>
<link linkend="_structi2c__s">i2c_s</link><link linkend="_struct_i2_c___type_def">I2C_TypeDef</link>
<para>Inter-integrated Circuit Interface </para>
<link linkend="_struct_i2_s___handle_type_def">I2S_HandleTypeDef</link>
<para>I2S handle Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_i2_s___init_type_def">I2S_InitTypeDef</link>
<para>I2S Init structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_classmbed_1_1_interrupt_manager">InterruptManager</link><link linkend="_union_i_p_s_r___type">IPSR_Type</link>
<para>Union type to access the Interrupt Program Status Register (IPSR) </para>
<link linkend="_struct_i_r_d_a___handle_type_def">IRDA_HandleTypeDef</link>
<para>IRDA handle Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_i_r_d_a___init_type_def">IRDA_InitTypeDef</link>
<para>IRDA Init Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_i_t_m___type">ITM_Type</link>
<para>Structure type to access the Instrumentation Trace Macrocell Register (ITM) </para>
<link linkend="_struct_i_w_d_g___handle_type_def">IWDG_HandleTypeDef</link>
<para>IWDG handle Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_i_w_d_g___init_type_def">IWDG_InitTypeDef</link>
<para>IWDG Init structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_i_w_d_g___type_def">IWDG_TypeDef</link>
<para>Independent WATCHDOG </para>
<link linkend="_struct_n_v_i_c___type">NVIC_Type</link>
<para>Structure type to access the Nested Vectored Interrupt Controller (NVIC) </para>
<link linkend="_struct_p_c_d___handle_type_def">PCD_HandleTypeDef</link>
<para>PCD Handle Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_pin_map">PinMap</link><link linkend="_structport__s">port_s</link><link linkend="_structpwmout__s">pwmout_s</link><link linkend="_struct_p_w_r___p_v_d_type_def">PWR_PVDTypeDef</link>
<para>PWR PVD configuration structure definition </para>
<link linkend="_struct_p_w_r___type_def">PWR_TypeDef</link>
<para>Power Control </para>
<link linkend="_struct_r_c_c___clk_init_type_def">RCC_ClkInitTypeDef</link>
<para>RCC System, AHB and APB busses clock configuration structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_r_c_c___osc_init_type_def">RCC_OscInitTypeDef</link>
<para>RCC Internal/External Oscillator (HSE, HSI, LSE and LSI) configuration structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_r_c_c___periph_c_l_k_init_type_def">RCC_PeriphCLKInitTypeDef</link>
<para>RCC extended clocks structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_r_c_c___p_l_l_i2_s_init_type_def">RCC_PLLI2SInitTypeDef</link>
<para>PLLI2S Clock structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_r_c_c___p_l_l_init_type_def">RCC_PLLInitTypeDef</link>
<para>RCC PLL configuration structure definition </para>
<link linkend="_struct_r_c_c___type_def">RCC_TypeDef</link>
<para>Reset and Clock Control </para>
<link linkend="_struct_r_n_g___handle_type_def">RNG_HandleTypeDef</link>
<para>RNG Handle Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_r_t_c___alarm_type_def">RTC_AlarmTypeDef</link>
<para>RTC Alarm structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_r_t_c___date_type_def">RTC_DateTypeDef</link>
<para>RTC Date structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_r_t_c___handle_type_def">RTC_HandleTypeDef</link>
<para>Time Handle Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_r_t_c___init_type_def">RTC_InitTypeDef</link>
<para>RTC Configuration Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_r_t_c___tamper_type_def">RTC_TamperTypeDef</link>
<para>RTC Tamper structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_r_t_c___time_type_def">RTC_TimeTypeDef</link>
<para>RTC Time structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_r_t_c___type_def">RTC_TypeDef</link>
<para>Real-Time Clock </para>
<link linkend="_struct_s_c_b___type">SCB_Type</link>
<para>Structure type to access the System Control Block (SCB) </para>
<link linkend="_struct_s_cn_s_c_b___type">SCnSCB_Type</link>
<para>Structure type to access the System Control and ID Register not in the SCB </para>
<link linkend="_struct_s_d___handle_type_def">SD_HandleTypeDef</link>
<para>SDIO Handle Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_s_d_i_o___cmd_init_type_def">SDIO_CmdInitTypeDef</link>
<para>SDIO Command Control structure </para>
<link linkend="_struct_s_d_i_o___data_init_type_def">SDIO_DataInitTypeDef</link>
<para>SDIO Data Control structure </para>
<link linkend="_struct_s_d_i_o___init_type_def">SDIO_InitTypeDef</link>
<para>SDMMC Configuration Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_s_d_i_o___type_def">SDIO_TypeDef</link>
<para>SD host Interface </para>
<link linkend="_structserial__s">serial_s</link><link linkend="_struct_s_m_a_r_t_c_a_r_d___handle_type_def">SMARTCARD_HandleTypeDef</link>
<para>SMARTCARD handle Structure definition </para>
<link linkend="_struct_s_m_a_r_t_c_a_r_d___init_type_def">SMARTCARD_InitTypeDef</link>
<para>SMARTCARD Init Structure definition </para>
<link linkend="_struct_s_p_i___init_type_def">SPI_InitTypeDef</link>
<para>SPI Configuration Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_structspi__s">spi_s</link><link linkend="_struct_s_p_i___type_def">SPI_TypeDef</link>
<para>Serial Peripheral Interface </para>
<link linkend="_classmbed_1_1_stream">Stream</link><link linkend="_struct_s_y_s_c_f_g___type_def">SYSCFG_TypeDef</link>
<para>System configuration controller </para>
<link linkend="_struct_sys_tick___type">SysTick_Type</link>
<para>Structure type to access the System Timer (SysTick) </para>
<link linkend="_classmbed_1_1_ticker">Ticker</link><link linkend="_structticker__event__s">ticker_event_s</link><link linkend="_struct_t_i_m___base___init_type_def">TIM_Base_InitTypeDef</link>
<para>TIM Time base Configuration Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_t_i_m___break_dead_time_config_type_def">TIM_BreakDeadTimeConfigTypeDef</link>
<para>TIM Break and Dead time configuration Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_t_i_m___clear_input_config_type_def">TIM_ClearInputConfigTypeDef</link>
<para>Clear Input Configuration Handle Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_t_i_m___clock_config_type_def">TIM_ClockConfigTypeDef</link>
<para>Clock Configuration Handle Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_t_i_m___encoder___init_type_def">TIM_Encoder_InitTypeDef</link>
<para>TIM Encoder Configuration Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_t_i_m___hall_sensor___init_type_def">TIM_HallSensor_InitTypeDef</link>
<para>TIM Hall sensor Configuration Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_t_i_m___handle_type_def">TIM_HandleTypeDef</link>
<para>TIM Time Base Handle Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_t_i_m___i_c___init_type_def">TIM_IC_InitTypeDef</link>
<para>TIM Input Capture Configuration Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_t_i_m___master_config_type_def">TIM_MasterConfigTypeDef</link>
<para>TIM Master configuration Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_t_i_m___o_c___init_type_def">TIM_OC_InitTypeDef</link>
<para>TIM Output Compare Configuration Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_t_i_m___one_pulse___init_type_def">TIM_OnePulse_InitTypeDef</link>
<para>TIM One Pulse Mode Configuration Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_t_i_m___slave_config_type_def">TIM_SlaveConfigTypeDef</link>
<para>TIM Slave configuration Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_t_i_m___type_def">TIM_TypeDef</link>
<para>TIM </para>
<link linkend="_classmbed_1_1_timeout">Timeout</link><link linkend="_classmbed_1_1_timer">Timer</link><link linkend="_classmbed_1_1_timer_event">TimerEvent</link><link linkend="_struct_t_p_i___type">TPI_Type</link>
<para>Structure type to access the Trace Port Interface Register (TPI) </para>
<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link>
<para>UART handle Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_u_a_r_t___init_type_def">UART_InitTypeDef</link>
<para>UART Init Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_u_s_a_r_t___handle_type_def">USART_HandleTypeDef</link>
<para>USART handle Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_u_s_a_r_t___init_type_def">USART_InitTypeDef</link>
<para>USART Init Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_u_s_a_r_t___type_def">USART_TypeDef</link>
<para>Universal Synchronous Asynchronous Receiver Transmitter </para>
<link linkend="_struct_u_s_b___o_t_g___cfg_type_def">USB_OTG_CfgTypeDef</link>
<para>PCD Initialization Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_u_s_b___o_t_g___device_type_def">USB_OTG_DeviceTypeDef</link>
<para>__device_Registers </para>
<link linkend="_struct_u_s_b___o_t_g___e_p_type_def">USB_OTG_EPTypeDef</link><link linkend="_struct_u_s_b___o_t_g___global_type_def">USB_OTG_GlobalTypeDef</link>
<para>__USB_OTG_Core_register </para>
<link linkend="_struct_u_s_b___o_t_g___h_c_type_def">USB_OTG_HCTypeDef</link><link linkend="_struct_u_s_b___o_t_g___host_channel_type_def">USB_OTG_HostChannelTypeDef</link>
<para>__Host_Channel_Specific_Registers </para>
<link linkend="_struct_u_s_b___o_t_g___host_type_def">USB_OTG_HostTypeDef</link>
<para>__Host_Mode_Register_Structures </para>
<link linkend="_struct_u_s_b___o_t_g___i_n_endpoint_type_def">USB_OTG_INEndpointTypeDef</link>
<para>__IN_Endpoint-Specific_Register </para>
<link linkend="_struct_u_s_b___o_t_g___o_u_t_endpoint_type_def">USB_OTG_OUTEndpointTypeDef</link>
<para>__OUT_Endpoint-Specific_Registers </para>
<link linkend="_struct_w_w_d_g___handle_type_def">WWDG_HandleTypeDef</link>
<para>WWDG handle Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_w_w_d_g___init_type_def">WWDG_InitTypeDef</link>
<para>WWDG Init structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<link linkend="_struct_w_w_d_g___type_def">WWDG_TypeDef</link>
<para>Window WATCHDOG </para>
<link linkend="_unionx_p_s_r___type">xPSR_Type</link>
<para>Union type to access the Special-Purpose Program Status Registers (xPSR) </para>
</section>
