<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group___u_a_r_t" xml:lang="en-US">
<title>UART</title>
<indexterm><primary>UART</primary></indexterm>
<simplesect>
    <title>Modules    </title>
        <itemizedlist>
            <listitem><para><link linkend="_group___u_a_r_t___exported___constants">UART_Exported_Constants</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_u_a_r_t___init_type_def">UART_InitTypeDef</link></para>

<para>UART Init Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link></para>

<para>UART handle Structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1ga19deab848407b106998416c78092fa9b">__HAL_UART_RESET_HANDLE_STATE</link>(__HANDLE__)   ((__HANDLE__)-&gt;State = <link linkend="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baa9c7d889fce61ccc717228d099a61d113">HAL_UART_STATE_RESET</link>)</para>

<para>Reset UART handle state. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1gafc4f20cb0f29ba146c9bc14167c52744">__HAL_UART_FLUSH_DRREGISTER</link>(__HANDLE__)   ((__HANDLE__)-&gt;Instance-&gt;DR)</para>

<para>Flushs the UART DR register. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1ga261fe8a2afe84ec048113654266c5bf6">__HAL_UART_GET_FLAG</link>(__HANDLE__,  __FLAG__)   (((__HANDLE__)-&gt;Instance-&gt;SR &amp; (__FLAG__)) == (__FLAG__))</para>

<para>Checks whether the specified UART flag is set or not. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1ga9bd035161d41cde4f2568c7af06493bf">__HAL_UART_CLEAR_FLAG</link>(__HANDLE__,  __FLAG__)   ((__HANDLE__)-&gt;Instance-&gt;SR &amp;= ~(__FLAG__))</para>

<para>Clears the specified UART pending flag. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1ga869439269c26e8dee93d49b1c7e67448">UART_IT_MASK</link>   ((uint32_t)0x0000FFFF)</para>

<para>Enables or disables the specified UART interrupt. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1gaba94165ed584d49c1ec12df9819bd4bb">__HAL_UART_ENABLE_IT</link>(__HANDLE__,  __INTERRUPT__)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1ga3c29b33f38658acbf592e9aaf84c6f33">__HAL_UART_DISABLE_IT</link>(__HANDLE__,  __INTERRUPT__)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1gab7ad503802bf56bf397c392fc8e18b77">__HAL_UART_GET_IT_SOURCE</link>(__HANDLE__,  __IT__)</para>

<para>Checks whether the specified UART interrupt has occurred or not. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1gae36e7ec0aaee00f602ed00a201257362">__HAL_UART_ONEBIT_ENABLE</link>(__HANDLE__)   ((__HANDLE__)-&gt;Instance-&gt;CR3|= <link linkend="_group___peripheral___registers___bits___definition_1ga9a96fb1a7beab602cbc8cb0393593826">USART_CR3_ONEBIT</link>)</para>

<para>macros to enables or disables the UART&apos;s one bit sampling method </para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1ga02532f7f118aa7631586bee283c9ca9f">__HAL_UART_ONEBIT_DISABLE</link>(__HANDLE__)   ((__HANDLE__)-&gt;Instance-&gt;CR3 &amp;= (uint16_t)~((uint16_t)<link linkend="_group___peripheral___registers___bits___definition_1ga9a96fb1a7beab602cbc8cb0393593826">USART_CR3_ONEBIT</link>))</para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1ga49eb5ea4996a957afeb8be2793ba3fe9">__HAL_UART_ENABLE</link>(__HANDLE__)   ((__HANDLE__)-&gt;Instance-&gt;CR1 |=  <link linkend="_group___peripheral___registers___bits___definition_1ga2bb650676aaae4a5203f372d497d5947">USART_CR1_UE</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1gad2f9fbdb4adf3a09939e201eaeea072f">__HAL_UART_DISABLE</link>(__HANDLE__)   ((__HANDLE__)-&gt;Instance-&gt;CR1 &amp;=  ~<link linkend="_group___peripheral___registers___bits___definition_1ga2bb650676aaae4a5203f372d497d5947">USART_CR1_UE</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1gacbc5b08563103dbfe6911efa0286c5e1">__DIV_SAMPLING16</link>(_PCLK_,  _BAUD_)   (((_PCLK_)*25)/(4*(_BAUD_)))</para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1ga0b911ce045c1d8e81b82bfd6f5bf718a">__DIVMANT_SAMPLING16</link>(_PCLK_,  _BAUD_)   (<link linkend="_group___u_a_r_t_1gacbc5b08563103dbfe6911efa0286c5e1">__DIV_SAMPLING16</link>((_PCLK_), (_BAUD_))/100)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1gae4d9d30978043e6ec885e4ee66ac1705">__DIVFRAQ_SAMPLING16</link>(_PCLK_,  _BAUD_)   (((<link linkend="_group___u_a_r_t_1gacbc5b08563103dbfe6911efa0286c5e1">__DIV_SAMPLING16</link>((_PCLK_), (_BAUD_)) - (<link linkend="_group___u_a_r_t_1ga0b911ce045c1d8e81b82bfd6f5bf718a">__DIVMANT_SAMPLING16</link>((_PCLK_), (_BAUD_)) * 100)) * 16 + 50) / 100)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1ga5a2423c3000e1960469fee267ad922d6">__UART_BRR_SAMPLING16</link>(_PCLK_,  _BAUD_)   ((<link linkend="_group___u_a_r_t_1ga0b911ce045c1d8e81b82bfd6f5bf718a">__DIVMANT_SAMPLING16</link>((_PCLK_), (_BAUD_)) &lt;&lt; 4)|(<link linkend="_group___u_a_r_t_1gae4d9d30978043e6ec885e4ee66ac1705">__DIVFRAQ_SAMPLING16</link>((_PCLK_), (_BAUD_)) &amp; 0x0F))</para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1gab9d677e1de5143f0a489a92392bd8a4c">__DIV_SAMPLING8</link>(_PCLK_,  _BAUD_)   (((_PCLK_)*25)/(2*(_BAUD_)))</para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1ga2c80c9f27b42a320eca2059ab1b57bbe">__DIVMANT_SAMPLING8</link>(_PCLK_,  _BAUD_)   (<link linkend="_group___u_a_r_t_1gab9d677e1de5143f0a489a92392bd8a4c">__DIV_SAMPLING8</link>((_PCLK_), (_BAUD_))/100)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1ga70a201b08e6dd2e2e588a1b9059f62ec">__DIVFRAQ_SAMPLING8</link>(_PCLK_,  _BAUD_)   (((<link linkend="_group___u_a_r_t_1gab9d677e1de5143f0a489a92392bd8a4c">__DIV_SAMPLING8</link>((_PCLK_), (_BAUD_)) - (<link linkend="_group___u_a_r_t_1ga2c80c9f27b42a320eca2059ab1b57bbe">__DIVMANT_SAMPLING8</link>((_PCLK_), (_BAUD_)) * 100)) * 16 + 50) / 100)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1ga7682b1d1aa14091e335a34169e1d04ec">__UART_BRR_SAMPLING8</link>(_PCLK_,  _BAUD_)   ((<link linkend="_group___u_a_r_t_1ga2c80c9f27b42a320eca2059ab1b57bbe">__DIVMANT_SAMPLING8</link>((_PCLK_), (_BAUD_)) &lt;&lt; 4)|(<link linkend="_group___u_a_r_t_1ga70a201b08e6dd2e2e588a1b9059f62ec">__DIVFRAQ_SAMPLING8</link>((_PCLK_), (_BAUD_)) &amp; 0x0F))</para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1ga5d657d5c8e47b147a834e0018e9407c2">IS_UART_BAUDRATE</link>(BAUDRATE)   ((BAUDRATE) &lt; 10500001)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_a_r_t_1ga2c4dce8c60f202455e6f1481fc441f98">IS_UART_ADDRESS</link>(ADDRESS)   ((ADDRESS) &lt;= 0xF)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_group___u_a_r_t_1gaf55d844a35379c204c90be5d1e8e50ba">HAL_UART_StateTypeDef</link> { 
<link linkend="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baa9c7d889fce61ccc717228d099a61d113">HAL_UART_STATE_RESET</link> = 0x00
, <link linkend="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baade763629c1bdb4f08e52ef79d6e0900e">HAL_UART_STATE_READY</link> = 0x01
, <link linkend="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baad1eddce038ba828e8b4061a33a2d8801">HAL_UART_STATE_BUSY</link> = 0x02
, <link linkend="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baadc97ca42e9b05a08cb98e6721e27e80c">HAL_UART_STATE_BUSY_TX</link> = 0x12
, 
<link linkend="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baaf7929f7aebd6b450c25907904411680b">HAL_UART_STATE_BUSY_RX</link> = 0x22
, <link linkend="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baa2fdde93f9f55972b7133bf7c75dd2e8a">HAL_UART_STATE_BUSY_TX_RX</link> = 0x32
, <link linkend="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baa90891eeb767df19780e620a15bec807d">HAL_UART_STATE_TIMEOUT</link> = 0x03
, <link linkend="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baa5d50bfe0750db02c4fd03d778c8c318c">HAL_UART_STATE_ERROR</link> = 0x04
 }</para>

<para>HAL UART State structures definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</listitem>
            <listitem><para>enum <link linkend="_group___u_a_r_t_1ga9c84f51c2a1319577e9262a9554a43f4">HAL_UART_ErrorTypeDef</link> { 
<link linkend="_group___u_a_r_t_1gga9c84f51c2a1319577e9262a9554a43f4ae8fc450f442c38f1341efdf01547bc18">HAL_UART_ERROR_NONE</link> = 0x00
, <link linkend="_group___u_a_r_t_1gga9c84f51c2a1319577e9262a9554a43f4ae71cee41a15f1826d65a7656de6cd632">HAL_UART_ERROR_PE</link> = 0x01
, <link linkend="_group___u_a_r_t_1gga9c84f51c2a1319577e9262a9554a43f4af8e4eb46e6bab9851192832b24b7c28a">HAL_UART_ERROR_NE</link> = 0x02
, <link linkend="_group___u_a_r_t_1gga9c84f51c2a1319577e9262a9554a43f4a7dec947090ad7e30a7c8d8aef283c49e">HAL_UART_ERROR_FE</link> = 0x04
, 
<link linkend="_group___u_a_r_t_1gga9c84f51c2a1319577e9262a9554a43f4a6638bcad803890bde022fc33a6811f21">HAL_UART_ERROR_ORE</link> = 0x08
, <link linkend="_group___u_a_r_t_1gga9c84f51c2a1319577e9262a9554a43f4a6ef3b8de21df24d9a526eb42ffaa8b4f">HAL_UART_ERROR_DMA</link> = 0x10
 }</para>

<para>HAL UART Error Code structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1gabe47045024787099b0bfa82bbe7b0b6a">HAL_UART_Init</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1ga927245827265eff1f3580a0121efd424">HAL_HalfDuplex_Init</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1ga27e4497270bd06434e3965e4b06f5516">HAL_LIN_Init</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart, uint32_t BreakDetectLength)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1ga404bd8cc10fbc82bb125816937dd32e6">HAL_MultiProcessor_Init</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart, uint8_t Address, uint32_t WakeUpMethode)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1ga8d98eaab25e61ae12e2e240c3388c57b">HAL_UART_DeInit</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para>void <link linkend="_group___u_a_r_t_1ga0e553b32211877322f949b14801bbfa7">HAL_UART_MspInit</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para>void <link linkend="_group___u_a_r_t_1ga718f39804e3b910d738a0e1e46151188">HAL_UART_MspDeInit</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1ga210329848c1873957034e129ccf8944e">HAL_UART_Transmit</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1gab868edc590e3b827a14528a25c999e2f">HAL_UART_Receive</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1gaf223f2bcc2f5734f147cc5c626d757b0">HAL_UART_Transmit_IT</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart, uint8_t *pData, uint16_t Size)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1gadc0c3ef2109881d011601f0d41e70e40">HAL_UART_Receive_IT</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart, uint8_t *pData, uint16_t Size)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1ga039ce4af3997f11f55c3c92d043cce77">HAL_UART_Transmit_DMA</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart, uint8_t *pData, uint16_t Size)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1gad674cce054e58927720cd689620ffa08">HAL_UART_Receive_DMA</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart, uint8_t *pData, uint16_t Size)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1ga8a713fd976d8ef02b818ea6ff0d4e41a">HAL_UART_DMAPause</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1gaf2b3e6004d0200857781809baa16072d">HAL_UART_DMAResume</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1gab21aa06cfbaa1665b1062a803fcb4217">HAL_UART_DMAStop</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para>void <link linkend="_group___u_a_r_t_1gaad01472c507ceee3c5f2274c775ff3bf">HAL_UART_IRQHandler</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para>void <link linkend="_group___u_a_r_t_1gabcdf9b59049eccbc87d54042f9235b1a">HAL_UART_TxCpltCallback</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para>void <link linkend="_group___u_a_r_t_1ga49b287e7de94cd0a38d333629298f7c4">HAL_UART_TxHalfCpltCallback</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para>void <link linkend="_group___u_a_r_t_1gae494a9643f29b87d6d81e5264e60e57b">HAL_UART_RxCpltCallback</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para>void <link linkend="_group___u_a_r_t_1ga1884970cc493d8efba5aec28c0d526e7">HAL_UART_RxHalfCpltCallback</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para>void <link linkend="_group___u_a_r_t_1ga0e0456ea96d55db31de947fb3e954f18">HAL_UART_ErrorCallback</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1gaffbf11fb4929f709004a11675cd25fcf">HAL_LIN_SendBreak</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1ga659637545299b91d2a77dadaf7266bf2">HAL_MultiProcessor_EnterMuteMode</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1ga81b90fb3a4d7a8601a92260edbd3422f">HAL_MultiProcessor_ExitMuteMode</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1ga58d73e260a5536fb9cb40d7d2fe2b4bb">HAL_HalfDuplex_EnableTransmitter</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> <link linkend="_group___u_a_r_t_1ga396ebbcdbe352c3393ad3007614383ac">HAL_HalfDuplex_EnableReceiver</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para><link linkend="_group___u_a_r_t_1gaf55d844a35379c204c90be5d1e8e50ba">HAL_UART_StateTypeDef</link> <link linkend="_group___u_a_r_t_1ga8fcec96f9d249f41ecf0c7598ab421e5">HAL_UART_GetState</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
            <listitem><para>uint32_t <link linkend="_group___u_a_r_t_1ga6c5f93a76a0bd01ad2d1351adddfa63f">HAL_UART_GetError</link> (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> *huart)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_group___u_a_r_t_1gacbc5b08563103dbfe6911efa0286c5e1"/><section>
    <title>__DIV_SAMPLING16</title>
<indexterm><primary>__DIV_SAMPLING16</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__DIV_SAMPLING16</secondary></indexterm>
<para><computeroutput>#define __DIV_SAMPLING16( _PCLK_,  _BAUD_)   (((_PCLK_)*25)/(4*(_BAUD_)))</computeroutput></para><para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00428">428</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1gab9d677e1de5143f0a489a92392bd8a4c"/><section>
    <title>__DIV_SAMPLING8</title>
<indexterm><primary>__DIV_SAMPLING8</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__DIV_SAMPLING8</secondary></indexterm>
<para><computeroutput>#define __DIV_SAMPLING8( _PCLK_,  _BAUD_)   (((_PCLK_)*25)/(2*(_BAUD_)))</computeroutput></para><para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00433">433</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1gae4d9d30978043e6ec885e4ee66ac1705"/><section>
    <title>__DIVFRAQ_SAMPLING16</title>
<indexterm><primary>__DIVFRAQ_SAMPLING16</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__DIVFRAQ_SAMPLING16</secondary></indexterm>
<para><computeroutput>#define __DIVFRAQ_SAMPLING16( _PCLK_,  _BAUD_)   (((<link linkend="_group___u_a_r_t_1gacbc5b08563103dbfe6911efa0286c5e1">__DIV_SAMPLING16</link>((_PCLK_), (_BAUD_)) - (<link linkend="_group___u_a_r_t_1ga0b911ce045c1d8e81b82bfd6f5bf718a">__DIVMANT_SAMPLING16</link>((_PCLK_), (_BAUD_)) * 100)) * 16 + 50) / 100)</computeroutput></para><para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00430">430</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1ga70a201b08e6dd2e2e588a1b9059f62ec"/><section>
    <title>__DIVFRAQ_SAMPLING8</title>
<indexterm><primary>__DIVFRAQ_SAMPLING8</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__DIVFRAQ_SAMPLING8</secondary></indexterm>
<para><computeroutput>#define __DIVFRAQ_SAMPLING8( _PCLK_,  _BAUD_)   (((<link linkend="_group___u_a_r_t_1gab9d677e1de5143f0a489a92392bd8a4c">__DIV_SAMPLING8</link>((_PCLK_), (_BAUD_)) - (<link linkend="_group___u_a_r_t_1ga2c80c9f27b42a320eca2059ab1b57bbe">__DIVMANT_SAMPLING8</link>((_PCLK_), (_BAUD_)) * 100)) * 16 + 50) / 100)</computeroutput></para><para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00435">435</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1ga0b911ce045c1d8e81b82bfd6f5bf718a"/><section>
    <title>__DIVMANT_SAMPLING16</title>
<indexterm><primary>__DIVMANT_SAMPLING16</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__DIVMANT_SAMPLING16</secondary></indexterm>
<para><computeroutput>#define __DIVMANT_SAMPLING16( _PCLK_,  _BAUD_)   (<link linkend="_group___u_a_r_t_1gacbc5b08563103dbfe6911efa0286c5e1">__DIV_SAMPLING16</link>((_PCLK_), (_BAUD_))/100)</computeroutput></para><para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00429">429</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1ga2c80c9f27b42a320eca2059ab1b57bbe"/><section>
    <title>__DIVMANT_SAMPLING8</title>
<indexterm><primary>__DIVMANT_SAMPLING8</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__DIVMANT_SAMPLING8</secondary></indexterm>
<para><computeroutput>#define __DIVMANT_SAMPLING8( _PCLK_,  _BAUD_)   (<link linkend="_group___u_a_r_t_1gab9d677e1de5143f0a489a92392bd8a4c">__DIV_SAMPLING8</link>((_PCLK_), (_BAUD_))/100)</computeroutput></para><para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00434">434</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1ga9bd035161d41cde4f2568c7af06493bf"/><section>
    <title>__HAL_UART_CLEAR_FLAG</title>
<indexterm><primary>__HAL_UART_CLEAR_FLAG</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__HAL_UART_CLEAR_FLAG</secondary></indexterm>
<para><computeroutput>#define __HAL_UART_CLEAR_FLAG( __HANDLE__,  __FLAG__)   ((__HANDLE__)-&gt;Instance-&gt;SR &amp;= ~(__FLAG__))</computeroutput></para><para>

<para>Clears the specified UART pending flag. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__HANDLE__</entry><entry>
<para>specifies the UART Handle. This parameter can be UARTx where x: 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or UART peripheral. </para>
</entry>
                            </row>
                            <row>
<entry>__FLAG__</entry><entry>
<para>specifies the flag to check. This parameter can be any combination of the following values: <itemizedlist>
<listitem>
<para>UART_FLAG_CTS: CTS Change flag (not available for UART4 and UART5). </para>
</listitem>
<listitem>
<para>UART_FLAG_LBD: LIN Break detection flag. </para>
</listitem>
<listitem>
<para>UART_FLAG_TC: Transmission Complete flag. </para>
</listitem>
<listitem>
<para>UART_FLAG_RXNE: Receive data register not empty flag.</para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun error) and IDLE (Idle line detected) flags are cleared by software sequence: a read operation to USART_SR register followed by a read operation to USART_DR register. </para>

<para>RXNE flag can be also cleared by a read to the USART_DR register. </para>

<para>TC flag can be also cleared by software sequence: a read operation to USART_SR register followed by a write operation to USART_DR register. </para>

<para>TXE flag is cleared only by a write to the USART_DR register.</para>
</note>

                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00372">372</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1gad2f9fbdb4adf3a09939e201eaeea072f"/><section>
    <title>__HAL_UART_DISABLE</title>
<indexterm><primary>__HAL_UART_DISABLE</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__HAL_UART_DISABLE</secondary></indexterm>
<para><computeroutput>#define __HAL_UART_DISABLE( __HANDLE__)   ((__HANDLE__)-&gt;Instance-&gt;CR1 &amp;=  ~<link linkend="_group___peripheral___registers___bits___definition_1ga2bb650676aaae4a5203f372d497d5947">USART_CR1_UE</link>)</computeroutput></para><para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00426">426</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1ga3c29b33f38658acbf592e9aaf84c6f33"/><section>
    <title>__HAL_UART_DISABLE_IT</title>
<indexterm><primary>__HAL_UART_DISABLE_IT</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__HAL_UART_DISABLE_IT</secondary></indexterm>
<para><computeroutput>#define __HAL_UART_DISABLE_IT( __HANDLE__,  __INTERRUPT__)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((((__INTERRUPT__)&#32;&gt;&gt;&#32;28)&#32;==&#32;1)?&#32;((__HANDLE__)-&gt;Instance-&gt;CR1&#32;&amp;=&#32;~((__INTERRUPT__)&#32;&amp;&#32;<link linkend="_group___u_a_r_t_1ga869439269c26e8dee93d49b1c7e67448">UART_IT_MASK</link>)):&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(((__INTERRUPT__)&#32;&gt;&gt;&#32;28)&#32;==&#32;2)?&#32;((__HANDLE__)-&gt;Instance-&gt;CR2&#32;&amp;=&#32;~((__INTERRUPT__)&#32;&amp;&#32;<link linkend="_group___u_a_r_t_1ga869439269c26e8dee93d49b1c7e67448">UART_IT_MASK</link>)):&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((__HANDLE__)-&gt;Instance-&gt;CR3&#32;&amp;=&#32;~&#32;((__INTERRUPT__)&#32;&amp;&#32;<link linkend="_group___u_a_r_t_1ga869439269c26e8dee93d49b1c7e67448">UART_IT_MASK</link>)))
</programlisting><para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00396">396</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1ga49eb5ea4996a957afeb8be2793ba3fe9"/><section>
    <title>__HAL_UART_ENABLE</title>
<indexterm><primary>__HAL_UART_ENABLE</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__HAL_UART_ENABLE</secondary></indexterm>
<para><computeroutput>#define __HAL_UART_ENABLE( __HANDLE__)   ((__HANDLE__)-&gt;Instance-&gt;CR1 |=  <link linkend="_group___peripheral___registers___bits___definition_1ga2bb650676aaae4a5203f372d497d5947">USART_CR1_UE</link>)</computeroutput></para><para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00425">425</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1gaba94165ed584d49c1ec12df9819bd4bb"/><section>
    <title>__HAL_UART_ENABLE_IT</title>
<indexterm><primary>__HAL_UART_ENABLE_IT</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__HAL_UART_ENABLE_IT</secondary></indexterm>
<para><computeroutput>#define __HAL_UART_ENABLE_IT( __HANDLE__,  __INTERRUPT__)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((((__INTERRUPT__)&#32;&gt;&gt;&#32;28)&#32;==&#32;1)?&#32;((__HANDLE__)-&gt;Instance-&gt;CR1&#32;|=&#32;((__INTERRUPT__)&#32;&amp;&#32;<link linkend="_group___u_a_r_t_1ga869439269c26e8dee93d49b1c7e67448">UART_IT_MASK</link>)):&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(((__INTERRUPT__)&#32;&gt;&gt;&#32;28)&#32;==&#32;2)?&#32;((__HANDLE__)-&gt;Instance-&gt;CR2&#32;|=&#32;&#32;((__INTERRUPT__)&#32;&amp;&#32;<link linkend="_group___u_a_r_t_1ga869439269c26e8dee93d49b1c7e67448">UART_IT_MASK</link>)):&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((__HANDLE__)-&gt;Instance-&gt;CR3&#32;|=&#32;((__INTERRUPT__)&#32;&amp;&#32;<link linkend="_group___u_a_r_t_1ga869439269c26e8dee93d49b1c7e67448">UART_IT_MASK</link>)))
</programlisting><para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00393">393</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1gafc4f20cb0f29ba146c9bc14167c52744"/><section>
    <title>__HAL_UART_FLUSH_DRREGISTER</title>
<indexterm><primary>__HAL_UART_FLUSH_DRREGISTER</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__HAL_UART_FLUSH_DRREGISTER</secondary></indexterm>
<para><computeroutput>#define __HAL_UART_FLUSH_DRREGISTER( __HANDLE__)   ((__HANDLE__)-&gt;Instance-&gt;DR)</computeroutput></para><para>

<para>Flushs the UART DR register. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__HANDLE__</entry><entry>
<para>specifies the UART Handle. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00327">327</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1ga261fe8a2afe84ec048113654266c5bf6"/><section>
    <title>__HAL_UART_GET_FLAG</title>
<indexterm><primary>__HAL_UART_GET_FLAG</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__HAL_UART_GET_FLAG</secondary></indexterm>
<para><computeroutput>#define __HAL_UART_GET_FLAG( __HANDLE__,  __FLAG__)   (((__HANDLE__)-&gt;Instance-&gt;SR &amp; (__FLAG__)) == (__FLAG__))</computeroutput></para><para>

<para>Checks whether the specified UART flag is set or not. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__HANDLE__</entry><entry>
<para>specifies the UART Handle. This parameter can be UARTx where x: 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or UART peripheral. </para>
</entry>
                            </row>
                            <row>
<entry>__FLAG__</entry><entry>
<para>specifies the flag to check. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>UART_FLAG_CTS: CTS Change flag (not available for UART4 and UART5) </para>
</listitem>
<listitem>
<para>UART_FLAG_LBD: LIN Break detection flag </para>
</listitem>
<listitem>
<para>UART_FLAG_TXE: Transmit data register empty flag </para>
</listitem>
<listitem>
<para>UART_FLAG_TC: Transmission Complete flag </para>
</listitem>
<listitem>
<para>UART_FLAG_RXNE: Receive data register not empty flag </para>
</listitem>
<listitem>
<para>UART_FLAG_IDLE: Idle Line detection flag </para>
</listitem>
<listitem>
<para>UART_FLAG_ORE: OverRun Error flag </para>
</listitem>
<listitem>
<para>UART_FLAG_NE: Noise Error flag </para>
</listitem>
<listitem>
<para>UART_FLAG_FE: Framing Error flag </para>
</listitem>
<listitem>
<para>UART_FLAG_PE: Parity Error flag </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>The</entry><entry>
<para>new state of <emphasis role="bold">FLAG</emphasis> (TRUE or FALSE). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00348">348</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1gab7ad503802bf56bf397c392fc8e18b77"/><section>
    <title>__HAL_UART_GET_IT_SOURCE</title>
<indexterm><primary>__HAL_UART_GET_IT_SOURCE</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__HAL_UART_GET_IT_SOURCE</secondary></indexterm>
<para><computeroutput>#define __HAL_UART_GET_IT_SOURCE( __HANDLE__,  __IT__)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(((((__IT__)&#32;&gt;&gt;&#32;28)&#32;==&#32;1)?&#32;(__HANDLE__)-&gt;Instance-&gt;CR1:(((((uint32_t)(__IT__))&#32;&gt;&gt;&#32;28)&#32;==&#32;2)?&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__HANDLE__)-&gt;Instance-&gt;CR2&#32;:&#32;(__HANDLE__)-&gt;Instance-&gt;CR3))&#32;&amp;&#32;(((uint32_t)(__IT__))&#32;&amp;&#32;<link linkend="_group___u_a_r_t_1ga869439269c26e8dee93d49b1c7e67448">UART_IT_MASK</link>))
</programlisting><para>

<para>Checks whether the specified UART interrupt has occurred or not. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__HANDLE__</entry><entry>
<para>specifies the UART Handle. This parameter can be UARTx where x: 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or UART peripheral. </para>
</entry>
                            </row>
                            <row>
<entry>__IT__</entry><entry>
<para>specifies the UART interrupt source to check. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>UART_IT_CTS: CTS change interrupt (not available for UART4 and UART5) </para>
</listitem>
<listitem>
<para>UART_IT_LBD: LIN Break detection interrupt </para>
</listitem>
<listitem>
<para>UART_IT_TXE: Transmit Data Register empty interrupt </para>
</listitem>
<listitem>
<para>UART_IT_TC: Transmission complete interrupt </para>
</listitem>
<listitem>
<para>UART_IT_RXNE: Receive Data register not empty interrupt </para>
</listitem>
<listitem>
<para>UART_IT_IDLE: Idle line detection interrupt </para>
</listitem>
<listitem>
<para>USART_IT_ERR: Error interrupt </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>The</entry><entry>
<para>new state of <emphasis role="bold">IT</emphasis> (TRUE or FALSE). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00415">415</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1ga02532f7f118aa7631586bee283c9ca9f"/><section>
    <title>__HAL_UART_ONEBIT_DISABLE</title>
<indexterm><primary>__HAL_UART_ONEBIT_DISABLE</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__HAL_UART_ONEBIT_DISABLE</secondary></indexterm>
<para><computeroutput>#define __HAL_UART_ONEBIT_DISABLE( __HANDLE__)   ((__HANDLE__)-&gt;Instance-&gt;CR3 &amp;= (uint16_t)~((uint16_t)<link linkend="_group___peripheral___registers___bits___definition_1ga9a96fb1a7beab602cbc8cb0393593826">USART_CR3_ONEBIT</link>))</computeroutput></para><para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00423">423</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1gae36e7ec0aaee00f602ed00a201257362"/><section>
    <title>__HAL_UART_ONEBIT_ENABLE</title>
<indexterm><primary>__HAL_UART_ONEBIT_ENABLE</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__HAL_UART_ONEBIT_ENABLE</secondary></indexterm>
<para><computeroutput>#define __HAL_UART_ONEBIT_ENABLE( __HANDLE__)   ((__HANDLE__)-&gt;Instance-&gt;CR3|= <link linkend="_group___peripheral___registers___bits___definition_1ga9a96fb1a7beab602cbc8cb0393593826">USART_CR3_ONEBIT</link>)</computeroutput></para><para>

<para>macros to enables or disables the UART&apos;s one bit sampling method </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__HANDLE__</entry><entry>
<para>specifies the UART Handle. 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00422">422</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1ga19deab848407b106998416c78092fa9b"/><section>
    <title>__HAL_UART_RESET_HANDLE_STATE</title>
<indexterm><primary>__HAL_UART_RESET_HANDLE_STATE</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__HAL_UART_RESET_HANDLE_STATE</secondary></indexterm>
<para><computeroutput>#define __HAL_UART_RESET_HANDLE_STATE( __HANDLE__)   ((__HANDLE__)-&gt;State = <link linkend="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baa9c7d889fce61ccc717228d099a61d113">HAL_UART_STATE_RESET</link>)</computeroutput></para><para>

<para>Reset UART handle state. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__HANDLE__</entry><entry>
<para>specifies the UART Handle. This parameter can be UARTx where x: 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or UART peripheral. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00322">322</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1ga5a2423c3000e1960469fee267ad922d6"/><section>
    <title>__UART_BRR_SAMPLING16</title>
<indexterm><primary>__UART_BRR_SAMPLING16</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__UART_BRR_SAMPLING16</secondary></indexterm>
<para><computeroutput>#define __UART_BRR_SAMPLING16( _PCLK_,  _BAUD_)   ((<link linkend="_group___u_a_r_t_1ga0b911ce045c1d8e81b82bfd6f5bf718a">__DIVMANT_SAMPLING16</link>((_PCLK_), (_BAUD_)) &lt;&lt; 4)|(<link linkend="_group___u_a_r_t_1gae4d9d30978043e6ec885e4ee66ac1705">__DIVFRAQ_SAMPLING16</link>((_PCLK_), (_BAUD_)) &amp; 0x0F))</computeroutput></para><para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00431">431</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1ga7682b1d1aa14091e335a34169e1d04ec"/><section>
    <title>__UART_BRR_SAMPLING8</title>
<indexterm><primary>__UART_BRR_SAMPLING8</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>__UART_BRR_SAMPLING8</secondary></indexterm>
<para><computeroutput>#define __UART_BRR_SAMPLING8( _PCLK_,  _BAUD_)   ((<link linkend="_group___u_a_r_t_1ga2c80c9f27b42a320eca2059ab1b57bbe">__DIVMANT_SAMPLING8</link>((_PCLK_), (_BAUD_)) &lt;&lt; 4)|(<link linkend="_group___u_a_r_t_1ga70a201b08e6dd2e2e588a1b9059f62ec">__DIVFRAQ_SAMPLING8</link>((_PCLK_), (_BAUD_)) &amp; 0x0F))</computeroutput></para><para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00436">436</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1ga2c4dce8c60f202455e6f1481fc441f98"/><section>
    <title>IS_UART_ADDRESS</title>
<indexterm><primary>IS_UART_ADDRESS</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>IS_UART_ADDRESS</secondary></indexterm>
<para><computeroutput>#define IS_UART_ADDRESS( ADDRESS)   ((ADDRESS) &lt;= 0xF)</computeroutput></para><para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00439">439</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1ga5d657d5c8e47b147a834e0018e9407c2"/><section>
    <title>IS_UART_BAUDRATE</title>
<indexterm><primary>IS_UART_BAUDRATE</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>IS_UART_BAUDRATE</secondary></indexterm>
<para><computeroutput>#define IS_UART_BAUDRATE( BAUDRATE)   ((BAUDRATE) &lt; 10500001)</computeroutput></para><para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00438">438</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1ga869439269c26e8dee93d49b1c7e67448"/><section>
    <title>UART_IT_MASK</title>
<indexterm><primary>UART_IT_MASK</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>UART_IT_MASK</secondary></indexterm>
<para><computeroutput>#define UART_IT_MASK   ((uint32_t)0x0000FFFF)</computeroutput></para><para>

<para>Enables or disables the specified UART interrupt. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__HANDLE__</entry><entry>
<para>specifies the UART Handle. This parameter can be UARTx where x: 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or UART peripheral. </para>
</entry>
                            </row>
                            <row>
<entry>__INTERRUPT__</entry><entry>
<para>specifies the UART interrupt source to check. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>UART_IT_CTS: CTS change interrupt </para>
</listitem>
<listitem>
<para>UART_IT_LBD: LIN Break detection interrupt </para>
</listitem>
<listitem>
<para>UART_IT_TXE: Transmit Data Register empty interrupt </para>
</listitem>
<listitem>
<para>UART_IT_TC: Transmission complete interrupt </para>
</listitem>
<listitem>
<para>UART_IT_RXNE: Receive Data register not empty interrupt </para>
</listitem>
<listitem>
<para>UART_IT_IDLE: Idle line detection interrupt </para>
</listitem>
<listitem>
<para>UART_IT_PE: Parity Error interrupt </para>
</listitem>
<listitem>
<para>UART_IT_ERR: Error interrupt(Frame error, noise error, overrun error) </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the specified UART interrupt. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00392">392</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_group___u_a_r_t_1ga9c84f51c2a1319577e9262a9554a43f4"/><section>
    <title>HAL_UART_ErrorTypeDef</title>
<indexterm><primary>HAL_UART_ErrorTypeDef</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_ErrorTypeDef</secondary></indexterm>
<para><computeroutput>enum <link linkend="_group___u_a_r_t_1ga9c84f51c2a1319577e9262a9554a43f4">HAL_UART_ErrorTypeDef</link></computeroutput></para><para>

<para>HAL UART Error Code structure definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>HAL_UART_ERROR_NONE</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_ERROR_NONE</secondary></indexterm>
<anchor xml:id="_group___u_a_r_t_1gga9c84f51c2a1319577e9262a9554a43f4ae8fc450f442c38f1341efdf01547bc18"/>HAL_UART_ERROR_NONE</entry><entry>
<para>No error 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</entry></row><row><entry><indexterm><primary>HAL_UART_ERROR_PE</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_ERROR_PE</secondary></indexterm>
<anchor xml:id="_group___u_a_r_t_1gga9c84f51c2a1319577e9262a9554a43f4ae71cee41a15f1826d65a7656de6cd632"/>HAL_UART_ERROR_PE</entry><entry>
<para>Parity error 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</entry></row><row><entry><indexterm><primary>HAL_UART_ERROR_NE</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_ERROR_NE</secondary></indexterm>
<anchor xml:id="_group___u_a_r_t_1gga9c84f51c2a1319577e9262a9554a43f4af8e4eb46e6bab9851192832b24b7c28a"/>HAL_UART_ERROR_NE</entry><entry>
<para>Noise error 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</entry></row><row><entry><indexterm><primary>HAL_UART_ERROR_FE</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_ERROR_FE</secondary></indexterm>
<anchor xml:id="_group___u_a_r_t_1gga9c84f51c2a1319577e9262a9554a43f4a7dec947090ad7e30a7c8d8aef283c49e"/>HAL_UART_ERROR_FE</entry><entry>
<para>frame error 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</entry></row><row><entry><indexterm><primary>HAL_UART_ERROR_ORE</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_ERROR_ORE</secondary></indexterm>
<anchor xml:id="_group___u_a_r_t_1gga9c84f51c2a1319577e9262a9554a43f4a6638bcad803890bde022fc33a6811f21"/>HAL_UART_ERROR_ORE</entry><entry>
<para>Overrun error 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</entry></row><row><entry><indexterm><primary>HAL_UART_ERROR_DMA</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_ERROR_DMA</secondary></indexterm>
<anchor xml:id="_group___u_a_r_t_1gga9c84f51c2a1319577e9262a9554a43f4a6ef3b8de21df24d9a526eb42ffaa8b4f"/>HAL_UART_ERROR_DMA</entry><entry>
<para>DMA transfer error 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00112">112</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
<anchor xml:id="_group___u_a_r_t_1gaf55d844a35379c204c90be5d1e8e50ba"/><section>
    <title>HAL_UART_StateTypeDef</title>
<indexterm><primary>HAL_UART_StateTypeDef</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_StateTypeDef</secondary></indexterm>
<para><computeroutput>enum <link linkend="_group___u_a_r_t_1gaf55d844a35379c204c90be5d1e8e50ba">HAL_UART_StateTypeDef</link></computeroutput></para><para>

<para>HAL UART State structures definition 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>HAL_UART_STATE_RESET</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_STATE_RESET</secondary></indexterm>
<anchor xml:id="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baa9c7d889fce61ccc717228d099a61d113"/>HAL_UART_STATE_RESET</entry><entry>
<para>Peripheral is not yet Initialized 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</entry></row><row><entry><indexterm><primary>HAL_UART_STATE_READY</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_STATE_READY</secondary></indexterm>
<anchor xml:id="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baade763629c1bdb4f08e52ef79d6e0900e"/>HAL_UART_STATE_READY</entry><entry>
<para>Peripheral Initialized and ready for use 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</entry></row><row><entry><indexterm><primary>HAL_UART_STATE_BUSY</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_STATE_BUSY</secondary></indexterm>
<anchor xml:id="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baad1eddce038ba828e8b4061a33a2d8801"/>HAL_UART_STATE_BUSY</entry><entry>
<para>an internal process is ongoing 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</entry></row><row><entry><indexterm><primary>HAL_UART_STATE_BUSY_TX</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_STATE_BUSY_TX</secondary></indexterm>
<anchor xml:id="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baadc97ca42e9b05a08cb98e6721e27e80c"/>HAL_UART_STATE_BUSY_TX</entry><entry>
<para>Data Transmission process is ongoing 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</entry></row><row><entry><indexterm><primary>HAL_UART_STATE_BUSY_RX</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_STATE_BUSY_RX</secondary></indexterm>
<anchor xml:id="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baaf7929f7aebd6b450c25907904411680b"/>HAL_UART_STATE_BUSY_RX</entry><entry>
<para>Data Reception process is ongoing 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</entry></row><row><entry><indexterm><primary>HAL_UART_STATE_BUSY_TX_RX</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_STATE_BUSY_TX_RX</secondary></indexterm>
<anchor xml:id="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baa2fdde93f9f55972b7133bf7c75dd2e8a"/>HAL_UART_STATE_BUSY_TX_RX</entry><entry>
<para>Data Transmission and Reception process is ongoing </para>
</entry></row><row><entry><indexterm><primary>HAL_UART_STATE_TIMEOUT</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_STATE_TIMEOUT</secondary></indexterm>
<anchor xml:id="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baa90891eeb767df19780e620a15bec807d"/>HAL_UART_STATE_TIMEOUT</entry><entry>
<para>Timeout state 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</entry></row><row><entry><indexterm><primary>HAL_UART_STATE_ERROR</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_STATE_ERROR</secondary></indexterm>
<anchor xml:id="_group___u_a_r_t_1ggaf55d844a35379c204c90be5d1e8e50baa5d50bfe0750db02c4fd03d778c8c318c"/>HAL_UART_STATE_ERROR</entry><entry>
<para>Error 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="_stm32f4xx__hal__uart_8h_source_1l00097">97</link> of file <link linkend="_stm32f4xx__hal__uart_8h_source">stm32f4xx_hal_uart.h</link>.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group___u_a_r_t_1ga396ebbcdbe352c3393ad3007614383ac"/><section>
    <title>HAL_HalfDuplex_EnableReceiver()</title>
<indexterm><primary>HAL_HalfDuplex_EnableReceiver</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_HalfDuplex_EnableReceiver</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_HalfDuplex_EnableReceiver (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1ga58d73e260a5536fb9cb40d7d2fe2b4bb"/><section>
    <title>HAL_HalfDuplex_EnableTransmitter()</title>
<indexterm><primary>HAL_HalfDuplex_EnableTransmitter</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_HalfDuplex_EnableTransmitter</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_HalfDuplex_EnableTransmitter (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1ga927245827265eff1f3580a0121efd424"/><section>
    <title>HAL_HalfDuplex_Init()</title>
<indexterm><primary>HAL_HalfDuplex_Init</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_HalfDuplex_Init</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_HalfDuplex_Init (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1ga27e4497270bd06434e3965e4b06f5516"/><section>
    <title>HAL_LIN_Init()</title>
<indexterm><primary>HAL_LIN_Init</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_LIN_Init</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_LIN_Init (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart, uint32_t BreakDetectLength)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1gaffbf11fb4929f709004a11675cd25fcf"/><section>
    <title>HAL_LIN_SendBreak()</title>
<indexterm><primary>HAL_LIN_SendBreak</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_LIN_SendBreak</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_LIN_SendBreak (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1ga659637545299b91d2a77dadaf7266bf2"/><section>
    <title>HAL_MultiProcessor_EnterMuteMode()</title>
<indexterm><primary>HAL_MultiProcessor_EnterMuteMode</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_MultiProcessor_EnterMuteMode</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_MultiProcessor_EnterMuteMode (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1ga81b90fb3a4d7a8601a92260edbd3422f"/><section>
    <title>HAL_MultiProcessor_ExitMuteMode()</title>
<indexterm><primary>HAL_MultiProcessor_ExitMuteMode</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_MultiProcessor_ExitMuteMode</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_MultiProcessor_ExitMuteMode (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1ga404bd8cc10fbc82bb125816937dd32e6"/><section>
    <title>HAL_MultiProcessor_Init()</title>
<indexterm><primary>HAL_MultiProcessor_Init</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_MultiProcessor_Init</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_MultiProcessor_Init (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart, uint8_t Address, uint32_t WakeUpMethode)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1ga8d98eaab25e61ae12e2e240c3388c57b"/><section>
    <title>HAL_UART_DeInit()</title>
<indexterm><primary>HAL_UART_DeInit</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_DeInit</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_UART_DeInit (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1ga8a713fd976d8ef02b818ea6ff0d4e41a"/><section>
    <title>HAL_UART_DMAPause()</title>
<indexterm><primary>HAL_UART_DMAPause</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_DMAPause</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_UART_DMAPause (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1gaf2b3e6004d0200857781809baa16072d"/><section>
    <title>HAL_UART_DMAResume()</title>
<indexterm><primary>HAL_UART_DMAResume</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_DMAResume</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_UART_DMAResume (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1gab21aa06cfbaa1665b1062a803fcb4217"/><section>
    <title>HAL_UART_DMAStop()</title>
<indexterm><primary>HAL_UART_DMAStop</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_DMAStop</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_UART_DMAStop (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1ga0e0456ea96d55db31de947fb3e954f18"/><section>
    <title>HAL_UART_ErrorCallback()</title>
<indexterm><primary>HAL_UART_ErrorCallback</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_ErrorCallback</secondary></indexterm>
<para><computeroutput>void HAL_UART_ErrorCallback (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1ga6c5f93a76a0bd01ad2d1351adddfa63f"/><section>
    <title>HAL_UART_GetError()</title>
<indexterm><primary>HAL_UART_GetError</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_GetError</secondary></indexterm>
<para><computeroutput>uint32_t HAL_UART_GetError (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1ga8fcec96f9d249f41ecf0c7598ab421e5"/><section>
    <title>HAL_UART_GetState()</title>
<indexterm><primary>HAL_UART_GetState</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_GetState</secondary></indexterm>
<para><computeroutput><link linkend="_group___u_a_r_t_1gaf55d844a35379c204c90be5d1e8e50ba">HAL_UART_StateTypeDef</link> HAL_UART_GetState (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1gabe47045024787099b0bfa82bbe7b0b6a"/><section>
    <title>HAL_UART_Init()</title>
<indexterm><primary>HAL_UART_Init</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_Init</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_UART_Init (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1gaad01472c507ceee3c5f2274c775ff3bf"/><section>
    <title>HAL_UART_IRQHandler()</title>
<indexterm><primary>HAL_UART_IRQHandler</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_IRQHandler</secondary></indexterm>
<para><computeroutput>void HAL_UART_IRQHandler (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1ga718f39804e3b910d738a0e1e46151188"/><section>
    <title>HAL_UART_MspDeInit()</title>
<indexterm><primary>HAL_UART_MspDeInit</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_MspDeInit</secondary></indexterm>
<para><computeroutput>void HAL_UART_MspDeInit (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1ga0e553b32211877322f949b14801bbfa7"/><section>
    <title>HAL_UART_MspInit()</title>
<indexterm><primary>HAL_UART_MspInit</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_MspInit</secondary></indexterm>
<para><computeroutput>void HAL_UART_MspInit (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1gab868edc590e3b827a14528a25c999e2f"/><section>
    <title>HAL_UART_Receive()</title>
<indexterm><primary>HAL_UART_Receive</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_Receive</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_UART_Receive (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart, uint8_t * pData, uint16_t Size, uint32_t Timeout)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1gad674cce054e58927720cd689620ffa08"/><section>
    <title>HAL_UART_Receive_DMA()</title>
<indexterm><primary>HAL_UART_Receive_DMA</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_Receive_DMA</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_UART_Receive_DMA (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart, uint8_t * pData, uint16_t Size)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1gadc0c3ef2109881d011601f0d41e70e40"/><section>
    <title>HAL_UART_Receive_IT()</title>
<indexterm><primary>HAL_UART_Receive_IT</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_Receive_IT</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_UART_Receive_IT (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart, uint8_t * pData, uint16_t Size)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1gae494a9643f29b87d6d81e5264e60e57b"/><section>
    <title>HAL_UART_RxCpltCallback()</title>
<indexterm><primary>HAL_UART_RxCpltCallback</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_RxCpltCallback</secondary></indexterm>
<para><computeroutput>void HAL_UART_RxCpltCallback (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1ga1884970cc493d8efba5aec28c0d526e7"/><section>
    <title>HAL_UART_RxHalfCpltCallback()</title>
<indexterm><primary>HAL_UART_RxHalfCpltCallback</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_RxHalfCpltCallback</secondary></indexterm>
<para><computeroutput>void HAL_UART_RxHalfCpltCallback (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1ga210329848c1873957034e129ccf8944e"/><section>
    <title>HAL_UART_Transmit()</title>
<indexterm><primary>HAL_UART_Transmit</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_Transmit</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_UART_Transmit (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart, uint8_t * pData, uint16_t Size, uint32_t Timeout)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1ga039ce4af3997f11f55c3c92d043cce77"/><section>
    <title>HAL_UART_Transmit_DMA()</title>
<indexterm><primary>HAL_UART_Transmit_DMA</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_Transmit_DMA</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_UART_Transmit_DMA (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart, uint8_t * pData, uint16_t Size)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1gaf223f2bcc2f5734f147cc5c626d757b0"/><section>
    <title>HAL_UART_Transmit_IT()</title>
<indexterm><primary>HAL_UART_Transmit_IT</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_Transmit_IT</secondary></indexterm>
<para><computeroutput><link linkend="_stm32f4xx__hal__def_8h_1a63c0679d1cb8b8c684fbb0632743478f">HAL_StatusTypeDef</link> HAL_UART_Transmit_IT (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart, uint8_t * pData, uint16_t Size)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1gabcdf9b59049eccbc87d54042f9235b1a"/><section>
    <title>HAL_UART_TxCpltCallback()</title>
<indexterm><primary>HAL_UART_TxCpltCallback</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_TxCpltCallback</secondary></indexterm>
<para><computeroutput>void HAL_UART_TxCpltCallback (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
<anchor xml:id="_group___u_a_r_t_1ga49b287e7de94cd0a38d333629298f7c4"/><section>
    <title>HAL_UART_TxHalfCpltCallback()</title>
<indexterm><primary>HAL_UART_TxHalfCpltCallback</primary><secondary>UART</secondary></indexterm>
<indexterm><primary>UART</primary><secondary>HAL_UART_TxHalfCpltCallback</secondary></indexterm>
<para><computeroutput>void HAL_UART_TxHalfCpltCallback (<link linkend="_struct_u_a_r_t___handle_type_def">UART_HandleTypeDef</link> * huart)</computeroutput></para></section>
</section>
</section>
