<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_can__api_8h_source" xml:lang="en-US">
<title>can_api.h</title>
<indexterm><primary>C:/Users/dayton.flores/OneDrive/Documents/School/CU/ECEN 5803/Project 1/Module 1/Code2/sqrt_approx/mbed/can_api.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_can__api_8h_source_1l00001"/>00001 <emphasis role="comment">/*&#32;mbed&#32;Microcontroller&#32;Library</emphasis>
<anchor xml:id="_can__api_8h_source_1l00002"/>00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;2006-2013&#32;ARM&#32;Limited</emphasis>
<anchor xml:id="_can__api_8h_source_1l00003"/>00003 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_can__api_8h_source_1l00004"/>00004 <emphasis role="comment">&#32;*&#32;Licensed&#32;under&#32;the&#32;Apache&#32;License,&#32;Version&#32;2.0&#32;(the&#32;&quot;License&quot;);</emphasis>
<anchor xml:id="_can__api_8h_source_1l00005"/>00005 <emphasis role="comment">&#32;*&#32;you&#32;may&#32;not&#32;use&#32;this&#32;file&#32;except&#32;in&#32;compliance&#32;with&#32;the&#32;License.</emphasis>
<anchor xml:id="_can__api_8h_source_1l00006"/>00006 <emphasis role="comment">&#32;*&#32;You&#32;may&#32;obtain&#32;a&#32;copy&#32;of&#32;the&#32;License&#32;at</emphasis>
<anchor xml:id="_can__api_8h_source_1l00007"/>00007 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_can__api_8h_source_1l00008"/>00008 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;http://www.apache.org/licenses/LICENSE-2.0</emphasis>
<anchor xml:id="_can__api_8h_source_1l00009"/>00009 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_can__api_8h_source_1l00010"/>00010 <emphasis role="comment">&#32;*&#32;Unless&#32;required&#32;by&#32;applicable&#32;law&#32;or&#32;agreed&#32;to&#32;in&#32;writing,&#32;software</emphasis>
<anchor xml:id="_can__api_8h_source_1l00011"/>00011 <emphasis role="comment">&#32;*&#32;distributed&#32;under&#32;the&#32;License&#32;is&#32;distributed&#32;on&#32;an&#32;&quot;AS&#32;IS&quot;&#32;BASIS,</emphasis>
<anchor xml:id="_can__api_8h_source_1l00012"/>00012 <emphasis role="comment">&#32;*&#32;WITHOUT&#32;WARRANTIES&#32;OR&#32;CONDITIONS&#32;OF&#32;ANY&#32;KIND,&#32;either&#32;express&#32;or&#32;implied.</emphasis>
<anchor xml:id="_can__api_8h_source_1l00013"/>00013 <emphasis role="comment">&#32;*&#32;See&#32;the&#32;License&#32;for&#32;the&#32;specific&#32;language&#32;governing&#32;permissions&#32;and</emphasis>
<anchor xml:id="_can__api_8h_source_1l00014"/>00014 <emphasis role="comment">&#32;*&#32;limitations&#32;under&#32;the&#32;License.</emphasis>
<anchor xml:id="_can__api_8h_source_1l00015"/>00015 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_can__api_8h_source_1l00016"/>00016 <emphasis role="preprocessor">#ifndef&#32;MBED_CAN_API_H</emphasis>
<anchor xml:id="_can__api_8h_source_1l00017"/>00017 <emphasis role="preprocessor">#define&#32;MBED_CAN_API_H</emphasis>
<anchor xml:id="_can__api_8h_source_1l00018"/>00018 
<anchor xml:id="_can__api_8h_source_1l00019"/>00019 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_device_8h">device.h</link>&quot;</emphasis>
<anchor xml:id="_can__api_8h_source_1l00020"/>00020 
<anchor xml:id="_can__api_8h_source_1l00021"/>00021 <emphasis role="preprocessor">#if&#32;DEVICE_CAN</emphasis>
<anchor xml:id="_can__api_8h_source_1l00022"/>00022 
<anchor xml:id="_can__api_8h_source_1l00023"/>00023 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__pin_names_8h">PinNames.h</link>&quot;</emphasis>
<anchor xml:id="_can__api_8h_source_1l00024"/>00024 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__peripheral_names_8h">PeripheralNames.h</link>&quot;</emphasis>
<anchor xml:id="_can__api_8h_source_1l00025"/>00025 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_can__helper_8h">can_helper.h</link>&quot;</emphasis>
<anchor xml:id="_can__api_8h_source_1l00026"/>00026 
<anchor xml:id="_can__api_8h_source_1l00027"/>00027 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
<anchor xml:id="_can__api_8h_source_1l00028"/>00028 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;{
<anchor xml:id="_can__api_8h_source_1l00029"/>00029 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_can__api_8h_source_1l00030"/>00030 
<anchor xml:id="_can__api_8h_source_1l00031"/>00031 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;{
<anchor xml:id="_can__api_8h_source_1l00032"/>00032 &#32;&#32;&#32;&#32;IRQ_RX,
<anchor xml:id="_can__api_8h_source_1l00033"/>00033 &#32;&#32;&#32;&#32;IRQ_TX,
<anchor xml:id="_can__api_8h_source_1l00034"/>00034 &#32;&#32;&#32;&#32;IRQ_ERROR,
<anchor xml:id="_can__api_8h_source_1l00035"/>00035 &#32;&#32;&#32;&#32;IRQ_OVERRUN,
<anchor xml:id="_can__api_8h_source_1l00036"/>00036 &#32;&#32;&#32;&#32;IRQ_WAKEUP,
<anchor xml:id="_can__api_8h_source_1l00037"/>00037 &#32;&#32;&#32;&#32;IRQ_PASSIVE,
<anchor xml:id="_can__api_8h_source_1l00038"/>00038 &#32;&#32;&#32;&#32;IRQ_ARB,
<anchor xml:id="_can__api_8h_source_1l00039"/>00039 &#32;&#32;&#32;&#32;IRQ_BUS,
<anchor xml:id="_can__api_8h_source_1l00040"/>00040 &#32;&#32;&#32;&#32;IRQ_READY
<anchor xml:id="_can__api_8h_source_1l00041"/>00041 }&#32;CanIrqType;
<anchor xml:id="_can__api_8h_source_1l00042"/>00042 
<anchor xml:id="_can__api_8h_source_1l00043"/>00043 
<anchor xml:id="_can__api_8h_source_1l00044"/>00044 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;{
<anchor xml:id="_can__api_8h_source_1l00045"/>00045 &#32;&#32;&#32;&#32;MODE_RESET,
<anchor xml:id="_can__api_8h_source_1l00046"/>00046 &#32;&#32;&#32;&#32;MODE_NORMAL,
<anchor xml:id="_can__api_8h_source_1l00047"/>00047 &#32;&#32;&#32;&#32;MODE_SILENT,
<anchor xml:id="_can__api_8h_source_1l00048"/>00048 &#32;&#32;&#32;&#32;MODE_TEST_GLOBAL,
<anchor xml:id="_can__api_8h_source_1l00049"/>00049 &#32;&#32;&#32;&#32;MODE_TEST_LOCAL,
<anchor xml:id="_can__api_8h_source_1l00050"/>00050 &#32;&#32;&#32;&#32;MODE_TEST_SILENT
<anchor xml:id="_can__api_8h_source_1l00051"/>00051 }&#32;CanMode;
<anchor xml:id="_can__api_8h_source_1l00052"/>00052 
<anchor xml:id="_can__api_8h_source_1l00053"/>00053 <emphasis role="keyword">typedef</emphasis>&#32;void&#32;(*can_irq_handler)(uint32_t&#32;id,&#32;CanIrqType&#32;type);
<anchor xml:id="_can__api_8h_source_1l00054"/>00054 
<anchor xml:id="_can__api_8h_source_1l00055"/>00055 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>can_s&#32;can_t;
<anchor xml:id="_can__api_8h_source_1l00056"/>00056 
<anchor xml:id="_can__api_8h_source_1l00057"/>00057 <emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;can_init&#32;&#32;&#32;&#32;&#32;(can_t&#32;*obj,&#32;<link linkend="__pin_names_8h_1a5ceb873075d76667eb54dc6a7d2734d1">PinName</link>&#32;rd,&#32;<link linkend="__pin_names_8h_1a5ceb873075d76667eb54dc6a7d2734d1">PinName</link>&#32;td);
<anchor xml:id="_can__api_8h_source_1l00058"/>00058 <emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;can_free&#32;&#32;&#32;&#32;&#32;(can_t&#32;*obj);
<anchor xml:id="_can__api_8h_source_1l00059"/>00059 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;can_frequency(can_t&#32;*obj,&#32;<emphasis role="keywordtype">int</emphasis>&#32;hz);
<anchor xml:id="_can__api_8h_source_1l00060"/>00060 
<anchor xml:id="_can__api_8h_source_1l00061"/>00061 <emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;can_irq_init&#32;(can_t&#32;*obj,&#32;can_irq_handler&#32;handler,&#32;uint32_t&#32;<emphasis role="keywordtype">id</emphasis>);
<anchor xml:id="_can__api_8h_source_1l00062"/>00062 <emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;can_irq_free&#32;(can_t&#32;*obj);
<anchor xml:id="_can__api_8h_source_1l00063"/>00063 <emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;can_irq_set&#32;&#32;(can_t&#32;*obj,&#32;CanIrqType&#32;irq,&#32;uint32_t&#32;enable);
<anchor xml:id="_can__api_8h_source_1l00064"/>00064 
<anchor xml:id="_can__api_8h_source_1l00065"/>00065 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;can_write&#32;&#32;&#32;&#32;(can_t&#32;*obj,&#32;CAN_Message,&#32;<emphasis role="keywordtype">int</emphasis>&#32;cc);
<anchor xml:id="_can__api_8h_source_1l00066"/>00066 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;can_read&#32;&#32;&#32;&#32;&#32;(can_t&#32;*obj,&#32;CAN_Message&#32;*msg,&#32;<emphasis role="keywordtype">int</emphasis>&#32;handle);
<anchor xml:id="_can__api_8h_source_1l00067"/>00067 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;can_mode&#32;&#32;&#32;&#32;&#32;(can_t&#32;*obj,&#32;CanMode&#32;mode);
<anchor xml:id="_can__api_8h_source_1l00068"/>00068 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;can_filter(can_t&#32;*obj,&#32;uint32_t&#32;<emphasis role="keywordtype">id</emphasis>,&#32;uint32_t&#32;mask,&#32;CANFormat&#32;format,&#32;int32_t&#32;handle);
<anchor xml:id="_can__api_8h_source_1l00069"/>00069 <emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;can_reset&#32;&#32;&#32;&#32;(can_t&#32;*obj);
<anchor xml:id="_can__api_8h_source_1l00070"/>00070 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;can_rderror&#32;&#32;(can_t&#32;*obj);
<anchor xml:id="_can__api_8h_source_1l00071"/>00071 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;can_tderror&#32;&#32;(can_t&#32;*obj);
<anchor xml:id="_can__api_8h_source_1l00072"/>00072 <emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;can_monitor&#32;&#32;(can_t&#32;*obj,&#32;<emphasis role="keywordtype">int</emphasis>&#32;silent);
<anchor xml:id="_can__api_8h_source_1l00073"/>00073 
<anchor xml:id="_can__api_8h_source_1l00074"/>00074 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
<anchor xml:id="_can__api_8h_source_1l00075"/>00075 };
<anchor xml:id="_can__api_8h_source_1l00076"/>00076 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_can__api_8h_source_1l00077"/>00077 
<anchor xml:id="_can__api_8h_source_1l00078"/>00078 <emphasis role="preprocessor">#endif&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;MBED_CAN_API_H</emphasis>
<anchor xml:id="_can__api_8h_source_1l00079"/>00079 
<anchor xml:id="_can__api_8h_source_1l00080"/>00080 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
