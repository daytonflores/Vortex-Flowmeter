<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__function_pointer_8h_source" xml:lang="en-US">
<title>FunctionPointer.h</title>
<indexterm><primary>C:/Users/dayton.flores/OneDrive/Documents/School/CU/ECEN 5803/Project 1/Module 1/Code2/sqrt_approx/mbed/FunctionPointer.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__function_pointer_8h_source_1l00001"/>00001 <emphasis role="comment">/*&#32;mbed&#32;Microcontroller&#32;Library</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00002"/>00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;2006-2013&#32;ARM&#32;Limited</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00003"/>00003 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00004"/>00004 <emphasis role="comment">&#32;*&#32;Licensed&#32;under&#32;the&#32;Apache&#32;License,&#32;Version&#32;2.0&#32;(the&#32;&quot;License&quot;);</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00005"/>00005 <emphasis role="comment">&#32;*&#32;you&#32;may&#32;not&#32;use&#32;this&#32;file&#32;except&#32;in&#32;compliance&#32;with&#32;the&#32;License.</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00006"/>00006 <emphasis role="comment">&#32;*&#32;You&#32;may&#32;obtain&#32;a&#32;copy&#32;of&#32;the&#32;License&#32;at</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00007"/>00007 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00008"/>00008 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;http://www.apache.org/licenses/LICENSE-2.0</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00009"/>00009 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00010"/>00010 <emphasis role="comment">&#32;*&#32;Unless&#32;required&#32;by&#32;applicable&#32;law&#32;or&#32;agreed&#32;to&#32;in&#32;writing,&#32;software</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00011"/>00011 <emphasis role="comment">&#32;*&#32;distributed&#32;under&#32;the&#32;License&#32;is&#32;distributed&#32;on&#32;an&#32;&quot;AS&#32;IS&quot;&#32;BASIS,</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00012"/>00012 <emphasis role="comment">&#32;*&#32;WITHOUT&#32;WARRANTIES&#32;OR&#32;CONDITIONS&#32;OF&#32;ANY&#32;KIND,&#32;either&#32;express&#32;or&#32;implied.</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00013"/>00013 <emphasis role="comment">&#32;*&#32;See&#32;the&#32;License&#32;for&#32;the&#32;specific&#32;language&#32;governing&#32;permissions&#32;and</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00014"/>00014 <emphasis role="comment">&#32;*&#32;limitations&#32;under&#32;the&#32;License.</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00015"/>00015 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00016"/>00016 <emphasis role="preprocessor">#ifndef&#32;MBED_FUNCTIONPOINTER_H</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00017"/>00017 <emphasis role="preprocessor">#define&#32;MBED_FUNCTIONPOINTER_H</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00018"/>00018 
<anchor xml:id="__function_pointer_8h_source_1l00019"/>00019 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00020"/>00020 
<anchor xml:id="__function_pointer_8h_source_1l00021"/>00021 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacembed">mbed</link>&#32;{
<anchor xml:id="__function_pointer_8h_source_1l00022"/>00022 
<anchor xml:id="__function_pointer_8h_source_1l00023"/><link linkend="_namespacembed_1ac5088ada4e4cb0210a2560087fd7387a">00023</link> <emphasis role="keyword">typedef</emphasis>&#32;void&#32;(*<link linkend="_namespacembed_1ac5088ada4e4cb0210a2560087fd7387a">pvoidf_t</link>)(void);
<anchor xml:id="__function_pointer_8h_source_1l00024"/>00024 
<anchor xml:id="__function_pointer_8h_source_1l00027"/><link linkend="_classmbed_1_1_function_pointer">00027</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classmbed_1_1_function_pointer">FunctionPointer</link>&#32;{
<anchor xml:id="__function_pointer_8h_source_1l00028"/>00028 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="__function_pointer_8h_source_1l00029"/>00029 
<anchor xml:id="__function_pointer_8h_source_1l00034"/><link linkend="_classmbed_1_1_function_pointer_1a0ccc51be605d508ff0df32d226f76c7a">00034</link> &#32;&#32;&#32;&#32;<link linkend="_classmbed_1_1_function_pointer_1a0ccc51be605d508ff0df32d226f76c7a">FunctionPointer</link>(<emphasis role="keywordtype">void</emphasis>&#32;(*function)(<emphasis role="keywordtype">void</emphasis>)&#32;=&#32;0);
<anchor xml:id="__function_pointer_8h_source_1l00035"/>00035 
<anchor xml:id="__function_pointer_8h_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="__function_pointer_8h_source_1l00042"/><link linkend="_classmbed_1_1_function_pointer_1aeea086175529743816a9fb0d2d972834">00042</link> &#32;&#32;&#32;&#32;<link linkend="_classmbed_1_1_function_pointer_1aeea086175529743816a9fb0d2d972834">FunctionPointer</link>(T&#32;*<emphasis role="keywordtype">object</emphasis>,&#32;<emphasis role="keywordtype">void</emphasis>&#32;(T::*member)(<emphasis role="keywordtype">void</emphasis>))&#32;{
<anchor xml:id="__function_pointer_8h_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classmbed_1_1_function_pointer_1ae8507d9ccbe0a467029ec8c126f5e711">attach</link>(<emphasis role="keywordtype">object</emphasis>,&#32;member);
<anchor xml:id="__function_pointer_8h_source_1l00044"/>00044 &#32;&#32;&#32;&#32;}
<anchor xml:id="__function_pointer_8h_source_1l00045"/>00045 
<anchor xml:id="__function_pointer_8h_source_1l00050"/><link linkend="_classmbed_1_1_function_pointer_1ae8507d9ccbe0a467029ec8c126f5e711">00050</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classmbed_1_1_function_pointer_1ae8507d9ccbe0a467029ec8c126f5e711">attach</link>(<emphasis role="keywordtype">void</emphasis>&#32;(*function)(<emphasis role="keywordtype">void</emphasis>)&#32;=&#32;0);
<anchor xml:id="__function_pointer_8h_source_1l00051"/>00051 
<anchor xml:id="__function_pointer_8h_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="__function_pointer_8h_source_1l00058"/><link linkend="_classmbed_1_1_function_pointer_1acf0c3786a58620cbe4af0b00e1812b99">00058</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classmbed_1_1_function_pointer_1acf0c3786a58620cbe4af0b00e1812b99">attach</link>(T&#32;*<emphasis role="keywordtype">object</emphasis>,&#32;<emphasis role="keywordtype">void</emphasis>&#32;(T::*member)(<emphasis role="keywordtype">void</emphasis>))&#32;{
<anchor xml:id="__function_pointer_8h_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_object&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(object);
<anchor xml:id="__function_pointer_8h_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(_member,&#32;(<emphasis role="keywordtype">char</emphasis>*)&amp;member,&#32;<emphasis role="keyword">sizeof</emphasis>(member));
<anchor xml:id="__function_pointer_8h_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_membercaller&#32;=&#32;&amp;FunctionPointer::membercaller&lt;T&gt;;
<anchor xml:id="__function_pointer_8h_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_function&#32;=&#32;0;
<anchor xml:id="__function_pointer_8h_source_1l00063"/>00063 &#32;&#32;&#32;&#32;}
<anchor xml:id="__function_pointer_8h_source_1l00064"/>00064 
<anchor xml:id="__function_pointer_8h_source_1l00067"/><link linkend="_classmbed_1_1_function_pointer_1aba7af6b502e464074d3c31ff9236a22c">00067</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classmbed_1_1_function_pointer_1aba7af6b502e464074d3c31ff9236a22c">call</link>();
<anchor xml:id="__function_pointer_8h_source_1l00068"/>00068 
<anchor xml:id="__function_pointer_8h_source_1l00069"/><link linkend="_classmbed_1_1_function_pointer_1adc1be146f35c0125c1bb647d0f0b35d1">00069</link> &#32;&#32;&#32;&#32;<link linkend="_namespacembed_1ac5088ada4e4cb0210a2560087fd7387a">pvoidf_t</link>&#32;<link linkend="_classmbed_1_1_function_pointer_1adc1be146f35c0125c1bb647d0f0b35d1">get_function</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="__function_pointer_8h_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_namespacembed_1ac5088ada4e4cb0210a2560087fd7387a">pvoidf_t</link>)_function;
<anchor xml:id="__function_pointer_8h_source_1l00071"/>00071 &#32;&#32;&#32;&#32;}
<anchor xml:id="__function_pointer_8h_source_1l00072"/>00072 
<anchor xml:id="__function_pointer_8h_source_1l00073"/>00073 <emphasis role="preprocessor">#ifdef&#32;MBED_OPERATORS</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00074"/>00074 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&#32;()(<emphasis role="keywordtype">void</emphasis>);
<anchor xml:id="__function_pointer_8h_source_1l00075"/>00075 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00076"/>00076 
<anchor xml:id="__function_pointer_8h_source_1l00077"/>00077 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="__function_pointer_8h_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="__function_pointer_8h_source_1l00079"/>00079 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;membercaller(<emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keywordtype">object</emphasis>,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*member)&#32;{
<anchor xml:id="__function_pointer_8h_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T*&#32;o&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T*<emphasis role="keyword">&gt;</emphasis>(object);
<anchor xml:id="__function_pointer_8h_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;(T::*m)(void);
<anchor xml:id="__function_pointer_8h_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy((<emphasis role="keywordtype">char</emphasis>*)&amp;m,&#32;member,&#32;<emphasis role="keyword">sizeof</emphasis>(m));
<anchor xml:id="__function_pointer_8h_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(o-&gt;*m)();
<anchor xml:id="__function_pointer_8h_source_1l00084"/>00084 &#32;&#32;&#32;&#32;}
<anchor xml:id="__function_pointer_8h_source_1l00085"/>00085 
<anchor xml:id="__function_pointer_8h_source_1l00086"/>00086 &#32;&#32;&#32;&#32;void&#32;(*_function)(void);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;static&#32;function&#32;pointer&#32;-&#32;0&#32;if&#32;none&#32;attached</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00087"/>00087 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*_object;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;object&#32;this&#32;pointer&#32;-&#32;0&#32;if&#32;none&#32;attached</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00088"/>00088 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;_member[16];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;raw&#32;member&#32;function&#32;pointer&#32;storage&#32;-&#32;converted&#32;back&#32;by&#32;registered&#32;_membercaller</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00089"/>00089 &#32;&#32;&#32;&#32;void&#32;(*_membercaller)(<emphasis role="keywordtype">void</emphasis>*,&#32;<emphasis role="keywordtype">char</emphasis>*);&#32;<emphasis role="comment">//&#32;registered&#32;membercaller&#32;function&#32;to&#32;convert&#32;back&#32;and&#32;call&#32;_member&#32;on&#32;_object</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00090"/>00090 };
<anchor xml:id="__function_pointer_8h_source_1l00091"/>00091 
<anchor xml:id="__function_pointer_8h_source_1l00092"/>00092 }&#32;<emphasis role="comment">//&#32;namespace&#32;mbed</emphasis>
<anchor xml:id="__function_pointer_8h_source_1l00093"/>00093 
<anchor xml:id="__function_pointer_8h_source_1l00094"/>00094 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
