<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__call_chain_8h_source" xml:lang="en-US">
<title>CallChain.h</title>
<indexterm><primary>C:/Users/dayton.flores/OneDrive/Documents/School/CU/ECEN 5803/Project 1/Module 1/Code2/sqrt_approx/mbed/CallChain.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__call_chain_8h_source_1l00001"/>00001 <emphasis role="comment">/*&#32;mbed&#32;Microcontroller&#32;Library</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00002"/>00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;2006-2013&#32;ARM&#32;Limited</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00003"/>00003 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00004"/>00004 <emphasis role="comment">&#32;*&#32;Licensed&#32;under&#32;the&#32;Apache&#32;License,&#32;Version&#32;2.0&#32;(the&#32;&quot;License&quot;);</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00005"/>00005 <emphasis role="comment">&#32;*&#32;you&#32;may&#32;not&#32;use&#32;this&#32;file&#32;except&#32;in&#32;compliance&#32;with&#32;the&#32;License.</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00006"/>00006 <emphasis role="comment">&#32;*&#32;You&#32;may&#32;obtain&#32;a&#32;copy&#32;of&#32;the&#32;License&#32;at</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00007"/>00007 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00008"/>00008 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;http://www.apache.org/licenses/LICENSE-2.0</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00009"/>00009 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00010"/>00010 <emphasis role="comment">&#32;*&#32;Unless&#32;required&#32;by&#32;applicable&#32;law&#32;or&#32;agreed&#32;to&#32;in&#32;writing,&#32;software</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00011"/>00011 <emphasis role="comment">&#32;*&#32;distributed&#32;under&#32;the&#32;License&#32;is&#32;distributed&#32;on&#32;an&#32;&quot;AS&#32;IS&quot;&#32;BASIS,</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00012"/>00012 <emphasis role="comment">&#32;*&#32;WITHOUT&#32;WARRANTIES&#32;OR&#32;CONDITIONS&#32;OF&#32;ANY&#32;KIND,&#32;either&#32;express&#32;or&#32;implied.</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00013"/>00013 <emphasis role="comment">&#32;*&#32;See&#32;the&#32;License&#32;for&#32;the&#32;specific&#32;language&#32;governing&#32;permissions&#32;and</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00014"/>00014 <emphasis role="comment">&#32;*&#32;limitations&#32;under&#32;the&#32;License.</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00015"/>00015 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00016"/>00016 <emphasis role="preprocessor">#ifndef&#32;MBED_CALLCHAIN_H</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00017"/>00017 <emphasis role="preprocessor">#define&#32;MBED_CALLCHAIN_H</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00018"/>00018 
<anchor xml:id="__call_chain_8h_source_1l00019"/>00019 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__function_pointer_8h">FunctionPointer.h</link>&quot;</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00020"/>00020 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00021"/>00021 
<anchor xml:id="__call_chain_8h_source_1l00022"/>00022 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacembed">mbed</link>&#32;{
<anchor xml:id="__call_chain_8h_source_1l00023"/>00023 
<anchor xml:id="__call_chain_8h_source_1l00060"/><link linkend="_namespacembed_1a73eeab55d4f68e1d4d56aafc3ad1b505">00060</link> <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classmbed_1_1_function_pointer">FunctionPointer</link>*&#32;<link linkend="_namespacembed_1a73eeab55d4f68e1d4d56aafc3ad1b505">pFunctionPointer_t</link>;
<anchor xml:id="__call_chain_8h_source_1l00061"/>00061 
<anchor xml:id="__call_chain_8h_source_1l00062"/><link linkend="_classmbed_1_1_call_chain">00062</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classmbed_1_1_call_chain">CallChain</link>&#32;{
<anchor xml:id="__call_chain_8h_source_1l00063"/>00063 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="__call_chain_8h_source_1l00068"/><link linkend="_classmbed_1_1_call_chain_1ac0599301f7b8cbcbb337969b4f70c391">00068</link> &#32;&#32;&#32;&#32;<link linkend="_classmbed_1_1_call_chain_1ac0599301f7b8cbcbb337969b4f70c391">CallChain</link>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classmbed_1_1_call_chain_1af9593d4a5ff4274efaf429cb4f9e57cc">size</link>&#32;=&#32;4);
<anchor xml:id="__call_chain_8h_source_1l00069"/><link linkend="_classmbed_1_1_call_chain_1ad37d5d627222cf2e0193bf80b906b399">00069</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_classmbed_1_1_call_chain_1ad37d5d627222cf2e0193bf80b906b399">~CallChain</link>();
<anchor xml:id="__call_chain_8h_source_1l00070"/>00070 
<anchor xml:id="__call_chain_8h_source_1l00078"/><link linkend="_classmbed_1_1_call_chain_1a472ea4d4bff102206dabec6d29df9c6a">00078</link> &#32;&#32;&#32;&#32;<link linkend="_classmbed_1_1_function_pointer">pFunctionPointer_t</link>&#32;<link linkend="_classmbed_1_1_call_chain_1a472ea4d4bff102206dabec6d29df9c6a">add</link>(<emphasis role="keywordtype">void</emphasis>&#32;(*function)(<emphasis role="keywordtype">void</emphasis>));
<anchor xml:id="__call_chain_8h_source_1l00079"/>00079 
<anchor xml:id="__call_chain_8h_source_1l00088"/>00088 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="__call_chain_8h_source_1l00089"/><link linkend="_classmbed_1_1_call_chain_1a0b74c7fd71ee928c1f5d0b2aafd59781">00089</link> &#32;&#32;&#32;&#32;<link linkend="_classmbed_1_1_function_pointer">pFunctionPointer_t</link>&#32;<link linkend="_classmbed_1_1_call_chain_1a0b74c7fd71ee928c1f5d0b2aafd59781">add</link>(T&#32;*tptr,&#32;<emphasis role="keywordtype">void</emphasis>&#32;(T::*mptr)(<emphasis role="keywordtype">void</emphasis>))&#32;{
<anchor xml:id="__call_chain_8h_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;common_add(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classmbed_1_1_function_pointer">FunctionPointer</link>(tptr,&#32;mptr));
<anchor xml:id="__call_chain_8h_source_1l00091"/>00091 &#32;&#32;&#32;&#32;}
<anchor xml:id="__call_chain_8h_source_1l00092"/>00092 
<anchor xml:id="__call_chain_8h_source_1l00100"/><link linkend="_classmbed_1_1_call_chain_1a5e0dd730be3640cee8e482663d9025d7">00100</link> &#32;&#32;&#32;&#32;<link linkend="_classmbed_1_1_function_pointer">pFunctionPointer_t</link>&#32;<link linkend="_classmbed_1_1_call_chain_1a5e0dd730be3640cee8e482663d9025d7">add_front</link>(<emphasis role="keywordtype">void</emphasis>&#32;(*function)(<emphasis role="keywordtype">void</emphasis>));
<anchor xml:id="__call_chain_8h_source_1l00101"/>00101 
<anchor xml:id="__call_chain_8h_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="__call_chain_8h_source_1l00111"/><link linkend="_classmbed_1_1_call_chain_1a6bb4f38b3d8d3d3cd561e3da41b18c14">00111</link> &#32;&#32;&#32;&#32;<link linkend="_classmbed_1_1_function_pointer">pFunctionPointer_t</link>&#32;<link linkend="_classmbed_1_1_call_chain_1a6bb4f38b3d8d3d3cd561e3da41b18c14">add_front</link>(T&#32;*tptr,&#32;<emphasis role="keywordtype">void</emphasis>&#32;(T::*mptr)(<emphasis role="keywordtype">void</emphasis>))&#32;{
<anchor xml:id="__call_chain_8h_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;common_add_front(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classmbed_1_1_function_pointer">FunctionPointer</link>(tptr,&#32;mptr));
<anchor xml:id="__call_chain_8h_source_1l00113"/>00113 &#32;&#32;&#32;&#32;}
<anchor xml:id="__call_chain_8h_source_1l00114"/>00114 
<anchor xml:id="__call_chain_8h_source_1l00117"/><link linkend="_classmbed_1_1_call_chain_1af9593d4a5ff4274efaf429cb4f9e57cc">00117</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classmbed_1_1_call_chain_1af9593d4a5ff4274efaf429cb4f9e57cc">size</link>()&#32;<emphasis role="keyword">const</emphasis>;
<anchor xml:id="__call_chain_8h_source_1l00118"/>00118 
<anchor xml:id="__call_chain_8h_source_1l00126"/><link linkend="_classmbed_1_1_call_chain_1ac9801b42474ea68068b460184dcd670b">00126</link> &#32;&#32;&#32;&#32;<link linkend="_classmbed_1_1_function_pointer">pFunctionPointer_t</link>&#32;<link linkend="_classmbed_1_1_call_chain_1ac9801b42474ea68068b460184dcd670b">get</link>(<emphasis role="keywordtype">int</emphasis>&#32;i)&#32;<emphasis role="keyword">const</emphasis>;
<anchor xml:id="__call_chain_8h_source_1l00127"/>00127 
<anchor xml:id="__call_chain_8h_source_1l00135"/><link linkend="_classmbed_1_1_call_chain_1aaa4d81409a7ee87f9bf267fbbb2cb222">00135</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classmbed_1_1_call_chain_1aaa4d81409a7ee87f9bf267fbbb2cb222">find</link>(<link linkend="_classmbed_1_1_function_pointer">pFunctionPointer_t</link>&#32;f)&#32;<emphasis role="keyword">const</emphasis>;
<anchor xml:id="__call_chain_8h_source_1l00136"/>00136 
<anchor xml:id="__call_chain_8h_source_1l00139"/><link linkend="_classmbed_1_1_call_chain_1ac8bb3912a3ce86b15842e79d0b421204">00139</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classmbed_1_1_call_chain_1ac8bb3912a3ce86b15842e79d0b421204">clear</link>();
<anchor xml:id="__call_chain_8h_source_1l00140"/>00140 
<anchor xml:id="__call_chain_8h_source_1l00148"/><link linkend="_classmbed_1_1_call_chain_1a8f9752e9cf068d97962af45b726c2158">00148</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classmbed_1_1_call_chain_1a8f9752e9cf068d97962af45b726c2158">remove</link>(<link linkend="_classmbed_1_1_function_pointer">pFunctionPointer_t</link>&#32;f);
<anchor xml:id="__call_chain_8h_source_1l00149"/>00149 
<anchor xml:id="__call_chain_8h_source_1l00152"/><link linkend="_classmbed_1_1_call_chain_1aba7af6b502e464074d3c31ff9236a22c">00152</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classmbed_1_1_call_chain_1aba7af6b502e464074d3c31ff9236a22c">call</link>();
<anchor xml:id="__call_chain_8h_source_1l00153"/>00153 
<anchor xml:id="__call_chain_8h_source_1l00154"/>00154 <emphasis role="preprocessor">#ifdef&#32;MBED_OPERATORS</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00155"/>00155 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&#32;()(<emphasis role="keywordtype">void</emphasis>)&#32;{
<anchor xml:id="__call_chain_8h_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classmbed_1_1_call_chain_1aba7af6b502e464074d3c31ff9236a22c">call</link>();
<anchor xml:id="__call_chain_8h_source_1l00157"/>00157 &#32;&#32;&#32;&#32;}
<anchor xml:id="__call_chain_8h_source_1l00158"/>00158 &#32;&#32;&#32;&#32;<link linkend="_classmbed_1_1_function_pointer">pFunctionPointer_t</link>&#32;operator&#32;[](<emphasis role="keywordtype">int</emphasis>&#32;i)<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="__call_chain_8h_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classmbed_1_1_call_chain_1ac9801b42474ea68068b460184dcd670b">get</link>(i);
<anchor xml:id="__call_chain_8h_source_1l00160"/>00160 &#32;&#32;&#32;&#32;}
<anchor xml:id="__call_chain_8h_source_1l00161"/>00161 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00162"/>00162 
<anchor xml:id="__call_chain_8h_source_1l00163"/>00163 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="__call_chain_8h_source_1l00164"/>00164 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_check_size();
<anchor xml:id="__call_chain_8h_source_1l00165"/>00165 &#32;&#32;&#32;&#32;<link linkend="_namespacembed_1a73eeab55d4f68e1d4d56aafc3ad1b505">pFunctionPointer_t</link>&#32;common_add(<link linkend="_namespacembed_1a73eeab55d4f68e1d4d56aafc3ad1b505">pFunctionPointer_t</link>&#32;pf);
<anchor xml:id="__call_chain_8h_source_1l00166"/>00166 &#32;&#32;&#32;&#32;<link linkend="_namespacembed_1a73eeab55d4f68e1d4d56aafc3ad1b505">pFunctionPointer_t</link>&#32;common_add_front(<link linkend="_namespacembed_1a73eeab55d4f68e1d4d56aafc3ad1b505">pFunctionPointer_t</link>&#32;pf);
<anchor xml:id="__call_chain_8h_source_1l00167"/>00167 
<anchor xml:id="__call_chain_8h_source_1l00168"/>00168 &#32;&#32;&#32;&#32;<link linkend="_namespacembed_1a73eeab55d4f68e1d4d56aafc3ad1b505">pFunctionPointer_t</link>*&#32;_chain;
<anchor xml:id="__call_chain_8h_source_1l00169"/>00169 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_size;
<anchor xml:id="__call_chain_8h_source_1l00170"/>00170 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_elements;
<anchor xml:id="__call_chain_8h_source_1l00171"/>00171 
<anchor xml:id="__call_chain_8h_source_1l00172"/>00172 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;disallow&#32;copy&#32;constructor&#32;and&#32;assignment&#32;operators&#32;*/</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00173"/>00173 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="__call_chain_8h_source_1l00174"/>00174 &#32;&#32;&#32;&#32;<link linkend="_classmbed_1_1_call_chain_1ac0599301f7b8cbcbb337969b4f70c391">CallChain</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classmbed_1_1_call_chain_1ac0599301f7b8cbcbb337969b4f70c391">CallChain</link>&amp;);
<anchor xml:id="__call_chain_8h_source_1l00175"/>00175 &#32;&#32;&#32;&#32;<link linkend="_classmbed_1_1_call_chain_1ac0599301f7b8cbcbb337969b4f70c391">CallChain</link>&#32;&amp;&#32;operator&#32;=&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classmbed_1_1_call_chain_1ac0599301f7b8cbcbb337969b4f70c391">CallChain</link>&amp;);
<anchor xml:id="__call_chain_8h_source_1l00176"/>00176 };
<anchor xml:id="__call_chain_8h_source_1l00177"/>00177 
<anchor xml:id="__call_chain_8h_source_1l00178"/>00178 }&#32;<emphasis role="comment">//&#32;namespace&#32;mbed</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00179"/>00179 
<anchor xml:id="__call_chain_8h_source_1l00180"/>00180 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__call_chain_8h_source_1l00181"/>00181 
</programlisting></section>
